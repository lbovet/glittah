/* Generated by the Nim Compiler v1.9.1 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555154 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555149 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI536870929 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1426063364 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375732030 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400211 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554448 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI1459617810 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1476395018 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400202 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400068 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1342177283 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1342177287 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1342177286 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1342177284 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1375731721 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI33554441 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI1375731718 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1358954542 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217750 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI939524174 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI939524180 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400078 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400080 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400079 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400075 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1325400077 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554447 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI1325400076 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555171 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555179 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555178 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555175 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555176 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1459617801 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1174405221 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI536871058 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI536870976 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI536870970 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1358954499 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1358954500 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554445 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI1107296277 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1107296300 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
NTI1107296277.base = NTI33554445;
NTI1107296300.base = NTI1107296277;
var NNI1358954499 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1358954499, name: "RGB", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1358954499, name: "HSV", len: 0, sons: null}}};
NTI1358954499.node = NNI1358954499;
var NNI1358954500 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 3, offset: "mode", len: 2, typ: NTI1358954499, name: "mode", sons: [[setConstr(0), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "r", len: 0, typ: NTI33554445, name: "r", sons: null}, 
{kind: 1, offset: "g", len: 0, typ: NTI33554445, name: "g", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554445, name: "b", sons: null}]}], 
[setConstr(1), {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "h", len: 0, typ: NTI33554435, name: "h", sons: null}, 
{kind: 1, offset: "s", len: 0, typ: NTI33554445, name: "s", sons: null}, 
{kind: 1, offset: "v", len: 0, typ: NTI33554445, name: "v", sons: null}]}]]}, 
{kind: 1, offset: "a", len: 0, typ: NTI33554445, name: "a", sons: null}]};
NTI1358954500.node = NNI1358954500;
NTI536870970.base = NTI33554449;
NTI536870976.base = NTI33554445;
NTI536871058.base = NTI1174405221;
var NNI1459617801 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1459617801.node = NNI1459617801;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
var NNI33555176 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555176.node = NNI33555176;
NTI33555178.base = NTI33555175;
NTI33555179.base = NTI33555175;
var NNI33555175 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555178, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555179, name: "up", sons: null}]};
NTI33555175.node = NNI33555175;
var NNI33555171 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555171.node = NNI33555171;
NTI33555175.base = NTI33555171;
NTI33555176.base = NTI33555175;
NTI134217745.base = NTI33555176;
var NNI1325400076 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554447, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554447, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554447, name: "Field2", sons: null}]};
NTI1325400076.node = NNI1325400076;
var NNI1325400077 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554447, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554447, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554447, name: "Field2", sons: null}]};
NTI1325400077.node = NNI1325400077;
var NNI1325400075 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1325400076, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1325400077, name: "Field1", sons: null}]};
NTI1325400075.node = NNI1325400075;
var NNI1325400079 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554447, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554447, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554447, name: "Field2", sons: null}]};
NTI1325400079.node = NNI1325400079;
var NNI1325400080 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554447, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554447, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554447, name: "Field2", sons: null}]};
NTI1325400080.node = NNI1325400080;
var NNI1325400078 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI1325400079, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1325400080, name: "Field1", sons: null}]};
NTI1325400078.node = NNI1325400078;
var NNI939524180 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI939524174, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI939524180.node = NNI939524180;
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555177 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555177.node = NNI33555177;
NTI33555177.base = NTI33555175;
NTI134217746.base = NTI33555177;
var NNI134217750 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217750.node = NNI134217750;
NTI134217750.base = NTI33555176;
var NNI1358954542 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554445, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554445, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554447, name: "Field2", sons: null}]};
NTI1358954542.node = NNI1358954542;
NTI1375731718.base = NTI33554441;
NTI1375731721.base = NTI33554441;
var NNI1342177287 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1342177287.node = NNI1342177287;
NTI1342177286.base = NTI1342177287;
var NNI1342177283 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1342177283, name: "Shape", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1342177283, name: "FilledShape", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1342177283, name: "Path", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1342177283, name: "Points", len: 0, sons: null}}};
NTI1342177283.node = NNI1342177283;
var NNI1342177284 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "vertices", len: 0, typ: NTI1342177286, name: "vertices", sons: null}, 
{kind: 1, offset: "drawKind", len: 0, typ: NTI1342177283, name: "drawKind", sons: null}]};
NTI1342177284.node = NNI1342177284;
var NNI1325400068 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554445, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554445, name: "Field1", sons: null}]};
NTI1325400068.node = NNI1325400068;
var NNI1325400202 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1325400202.node = NNI1325400202;
var NNI1476395018 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1476395018.node = NNI1476395018;
var NNI1459617810 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554448, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554448, name: "b", sons: null}]};
NTI1459617810.node = NNI1459617810;
var NNI1325400211 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1325400211.node = NNI1325400211;
var NNI1375732030 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1375732030.node = NNI1375732030;
var NNI1426063364 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI1426063364.node = NNI1426063364;
var NNI536870929 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554447, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554447, name: "b", sons: null}]};
NTI536870929.node = NNI536870929;
NTI33555149.base = NTI33555154;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557083, src_33557084, ti_33557085) {
  var result_33557094 = null;

    switch (ti_33557085.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557074(ti_33557085))) {
      result_33557094 = src_33557084;
      }
      else {
        result_33557094 = [src_33557084[0], src_33557084[1]];
      }
      
      break;
    case 19:
            if (dest_33557083 === null || dest_33557083 === undefined) {
        dest_33557083 = {};
      }
      else {
        for (var key in dest_33557083) { delete dest_33557083[key]; }
      }
      for (var key in src_33557084) { dest_33557083[key] = src_33557084[key]; }
      result_33557094 = dest_33557083;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557085.base == null))) {
      result_33557094 = nimCopy(dest_33557083, src_33557084, ti_33557085.base);
      }
      else {
      if ((ti_33557085.kind == 17)) {
      result_33557094 = (dest_33557083 === null || dest_33557083 === undefined) ? {m_type: ti_33557085} : dest_33557083;
      }
      else {
        result_33557094 = (dest_33557083 === null || dest_33557083 === undefined) ? {} : dest_33557083;
      }
      }
      nimCopyAux(result_33557094, src_33557084, ti_33557085.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557084)) { 
        if(dest_33557083 === null || dest_33557083 === undefined || dest_33557083.length != src_33557084.length) {
          dest_33557083 = new src_33557084.constructor(src_33557084);
        } else {
          dest_33557083.set(src_33557084, 0);
        }
        result_33557094 = dest_33557083;
      } else {
        if (src_33557084 === null) {
          result_33557094 = null;
        }
        else {
          if (dest_33557083 === null || dest_33557083 === undefined || dest_33557083.length != src_33557084.length) {
            dest_33557083 = new Array(src_33557084.length);
          }
          result_33557094 = dest_33557083;
          for (var i = 0; i < src_33557084.length; ++i) {
            result_33557094[i] = nimCopy(result_33557094[i], src_33557084[i], ti_33557085.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557084 === null) {
        result_33557094 = null;
      }
      else {
        if (dest_33557083 === null || dest_33557083 === undefined || dest_33557083.length != src_33557084.length) {
          dest_33557083 = new Array(src_33557084.length);
        }
        result_33557094 = dest_33557083;
        for (var i = 0; i < src_33557084.length; ++i) {
          result_33557094[i] = nimCopy(result_33557094[i], src_33557084[i], ti_33557085.base);
        }
      }
    
      break;
    case 28:
            if (src_33557084 !== null) {
        result_33557094 = src_33557084.slice(0);
      }
    
      break;
    default: 
      result_33557094 = src_33557084;
      break;
    }

  return result_33557094;

}

function toJSStr(s_33556747) {
  var result_33556748 = null;

    var res_33556782 = newSeq_33556765((s_33556747).length);
    var i_33556783 = 0;
    var j_33556784 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556783 < (s_33556747).length)) break Label2;
          var c_33556785 = s_33556747[i_33556783];
          if ((c_33556785 < 128)) {
          res_33556782[j_33556784] = String.fromCharCode(c_33556785);
          i_33556783 += 1;
          }
          else {
            var helper_33556798 = newSeq_33556765(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556799 = c_33556785.toString(16);
                  if ((((code_33556799) == null ? 0 : (code_33556799).length) == 1)) {
                  helper_33556798.push("%0");;
                  }
                  else {
                  helper_33556798.push("%");;
                  }
                  
                  helper_33556798.push(code_33556799);;
                  i_33556783 += 1;
                  if ((((s_33556747).length <= i_33556783) || (s_33556747[i_33556783] < 128))) {
                  break Label3;
                  }
                  
                  c_33556785 = s_33556747[i_33556783];
                }
            };
++excHandler;
            try {
            res_33556782[j_33556784] = decodeURIComponent(helper_33556798.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556782[j_33556784] = helper_33556798.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556784 += 1;
        }
    };
    if (res_33556782.length < j_33556784) { for (var i = res_33556782.length ; i < j_33556784 ; ++i) res_33556782.push(null); }
               else { res_33556782.length = j_33556784; };
    result_33556748 = res_33556782.join("");

  return result_33556748;

}

function raiseException(e_33556607, ename_33556608) {
    e_33556607.name = ename_33556608;
    if ((excHandler == 0)) {
    unhandledException(e_33556607);
    }
    
    throw e_33556607;

  
}

function nimMin(a_33556937, b_33556938) {
    var Temporary1;

  var result_33556939 = 0;

  BeforeRet: {
    if ((a_33556937 <= b_33556938)) {
    Temporary1 = a_33556937;
    }
    else {
    Temporary1 = b_33556938;
    }
    
    result_33556939 = Temporary1;
    break BeforeRet;
  };

  return result_33556939;

}

function mnewString(len_33556836) {
        return new Array(len_33556836);
  

  
}
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([65, 90], [97, 122]);

function makeNimstrLit(c_33556741) {
      var result = [];
  for (var i = 0; i < c_33556741.length; ++i) {
    result[i] = c_33556741.charCodeAt(i);
  }
  return result;
  

  
}

function cstrToNimstr(c_33556744) {
      var ln = c_33556744.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556744.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556744.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet9 = setConstr(46, 44);

function nimCharToStr(x_33556454) {
  var result_33556455 = [];

    result_33556455 = nimCopy(null, mnewString(1), NTI33554449);
    result_33556455[0] = x_33556454;

  return result_33556455;

}
var ConstSet10 = setConstr([65, 90]);
var ConstSet11 = setConstr([97, 122]);
var ConstSet12 = setConstr(0);

function raiseFieldError2(f_33556718, discVal_33556719) {
    raiseException({message: (f_33556718 || []).concat(discVal_33556719 || [],[39] || []), parent: null, m_type: NTI134217750, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556451) {
  var result_33556452 = [];

    if (x_33556451) {
    result_33556452 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556452 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556452;

}

function reprDiscriminant(e_33557377, typ_33557378) {
    var Temporary1;

  var result_33557379 = [];

    switch (typ_33557378.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557377, typ_33557378);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557377 == 0)));
      break;
    default: 
      Temporary1 = HEX24_369098760(e_33557377);
      break;
    }
    result_33557379 = nimCopy(null, Temporary1, NTI33554449);

  return result_33557379;

}
var ConstSet13 = setConstr(0);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr(1);
var ConstSet17 = setConstr(1);
var ConstSet18 = setConstr(1);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr(0);
var ConstSet21 = setConstr(0);
var ConstSet22 = setConstr(0);
var ConstSet23 = setConstr(0);
var ConstSet24 = setConstr(0);
var ConstSet25 = setConstr(0);
var ConstSet26 = setConstr(0);
var ConstSet27 = setConstr(0);
var ConstSet28 = setConstr(0);

function addChar(x_33557198, c_33557199) {
    x_33557198.push(c_33557199);

  
}
var ConstSet29 = setConstr(0);
var ConstSet30 = setConstr(0);
var ConstSet31 = setConstr(0);
var ConstSet32 = setConstr(0);
var ConstSet33 = setConstr(0);
var ConstSet34 = setConstr(0);
    var toLowerRanges_989856717 = new Int32Array([65, 90, 532, 192, 214, 532, 216, 222, 532, 393, 394, 705, 433, 434, 717, 904, 906, 537, 910, 911, 563, 913, 929, 532, 931, 939, 532, 1021, 1023, 370, 1024, 1039, 580, 1040, 1071, 532, 1329, 1366, 548, 4256, 4293, 7764, 5024, 5103, 39364, 5104, 5109, 508, 7312, 7354, -2508, 7357, 7359, -2508, 7944, 7951, 492, 7960, 7965, 492, 7976, 7983, 492, 7992, 7999, 492, 8008, 8013, 492, 8040, 8047, 492, 8072, 8079, 492, 8088, 8095, 492, 8104, 8111, 492, 8120, 8121, 492, 8122, 8123, 426, 8136, 8139, 414, 8152, 8153, 492, 8154, 8155, 400, 8168, 8169, 492, 8170, 8171, 388, 8184, 8185, 372, 8186, 8187, 374, 11264, 11310, 548, 11390, 11391, -10315, 65313, 65338, 532, 66560, 66599, 540, 66736, 66771, 540, 68736, 68786, 564, 71840, 71871, 532, 93760, 93791, 532, 125184, 125217, 534]);
    var toLowerSinglets_989856718 = new Int32Array([256, 501, 258, 501, 260, 501, 262, 501, 264, 501, 266, 501, 268, 501, 270, 501, 272, 501, 274, 501, 276, 501, 278, 501, 280, 501, 282, 501, 284, 501, 286, 501, 288, 501, 290, 501, 292, 501, 294, 501, 296, 501, 298, 501, 300, 501, 302, 501, 304, 301, 306, 501, 308, 501, 310, 501, 313, 501, 315, 501, 317, 501, 319, 501, 321, 501, 323, 501, 325, 501, 327, 501, 330, 501, 332, 501, 334, 501, 336, 501, 338, 501, 340, 501, 342, 501, 344, 501, 346, 501, 348, 501, 350, 501, 352, 501, 354, 501, 356, 501, 358, 501, 360, 501, 362, 501, 364, 501, 366, 501, 368, 501, 370, 501, 372, 501, 374, 501, 376, 379, 377, 501, 379, 501, 381, 501, 385, 710, 386, 501, 388, 501, 390, 706, 391, 501, 395, 501, 398, 579, 399, 702, 400, 703, 401, 501, 403, 705, 404, 707, 406, 711, 407, 709, 408, 501, 412, 711, 413, 713, 415, 714, 416, 501, 418, 501, 420, 501, 422, 718, 423, 501, 425, 718, 428, 501, 430, 718, 431, 501, 435, 501, 437, 501, 439, 719, 440, 501, 444, 501, 452, 502, 453, 501, 455, 502, 456, 501, 458, 502, 459, 501, 461, 501, 463, 501, 465, 501, 467, 501, 469, 501, 471, 501, 473, 501, 475, 501, 478, 501, 480, 501, 482, 501, 484, 501, 486, 501, 488, 501, 490, 501, 492, 501, 494, 501, 497, 502, 498, 501, 500, 501, 502, 403, 503, 444, 504, 501, 506, 501, 508, 501, 510, 501, 512, 501, 514, 501, 516, 501, 518, 501, 520, 501, 522, 501, 524, 501, 526, 501, 528, 501, 530, 501, 532, 501, 534, 501, 536, 501, 538, 501, 540, 501, 542, 501, 544, 370, 546, 501, 548, 501, 550, 501, 552, 501, 554, 501, 556, 501, 558, 501, 560, 501, 562, 501, 570, 11295, 571, 501, 573, 337, 574, 11292, 577, 501, 579, 305, 580, 569, 581, 571, 582, 501, 584, 501, 586, 501, 588, 501, 590, 501, 880, 501, 882, 501, 886, 501, 895, 616, 902, 538, 908, 564, 975, 508, 984, 501, 986, 501, 988, 501, 990, 501, 992, 501, 994, 501, 996, 501, 998, 501, 1000, 501, 1002, 501, 1004, 501, 1006, 501, 1012, 440, 1015, 501, 1017, 493, 1018, 501, 1120, 501, 1122, 501, 1124, 501, 1126, 501, 1128, 501, 1130, 501, 1132, 501, 1134, 501, 1136, 501, 1138, 501, 1140, 501, 1142, 501, 1144, 501, 1146, 501, 1148, 501, 1150, 501, 1152, 501, 1162, 501, 1164, 501, 1166, 501, 1168, 501, 1170, 501, 1172, 501, 1174, 501, 1176, 501, 1178, 501, 1180, 501, 1182, 501, 1184, 501, 1186, 501, 1188, 501, 1190, 501, 1192, 501, 1194, 501, 1196, 501, 1198, 501, 1200, 501, 1202, 501, 1204, 501, 1206, 501, 1208, 501, 1210, 501, 1212, 501, 1214, 501, 1216, 515, 1217, 501, 1219, 501, 1221, 501, 1223, 501, 1225, 501, 1227, 501, 1229, 501, 1232, 501, 1234, 501, 1236, 501, 1238, 501, 1240, 501, 1242, 501, 1244, 501, 1246, 501, 1248, 501, 1250, 501, 1252, 501, 1254, 501, 1256, 501, 1258, 501, 1260, 501, 1262, 501, 1264, 501, 1266, 501, 1268, 501, 1270, 501, 1272, 501, 1274, 501, 1276, 501, 1278, 501, 1280, 501, 1282, 501, 1284, 501, 1286, 501, 1288, 501, 1290, 501, 1292, 501, 1294, 501, 1296, 501, 1298, 501, 1300, 501, 1302, 501, 1304, 501, 1306, 501, 1308, 501, 1310, 501, 1312, 501, 1314, 501, 1316, 501, 1318, 501, 1320, 501, 1322, 501, 1324, 501, 1326, 501, 4295, 7764, 4301, 7764, 7680, 501, 7682, 501, 7684, 501, 7686, 501, 7688, 501, 7690, 501, 7692, 501, 7694, 501, 7696, 501, 7698, 501, 7700, 501, 7702, 501, 7704, 501, 7706, 501, 7708, 501, 7710, 501, 7712, 501, 7714, 501, 7716, 501, 7718, 501, 7720, 501, 7722, 501, 7724, 501, 7726, 501, 7728, 501, 7730, 501, 7732, 501, 7734, 501, 7736, 501, 7738, 501, 7740, 501, 7742, 501, 7744, 501, 7746, 501, 7748, 501, 7750, 501, 7752, 501, 7754, 501, 7756, 501, 7758, 501, 7760, 501, 7762, 501, 7764, 501, 7766, 501, 7768, 501, 7770, 501, 7772, 501, 7774, 501, 7776, 501, 7778, 501, 7780, 501, 7782, 501, 7784, 501, 7786, 501, 7788, 501, 7790, 501, 7792, 501, 7794, 501, 7796, 501, 7798, 501, 7800, 501, 7802, 501, 7804, 501, 7806, 501, 7808, 501, 7810, 501, 7812, 501, 7814, 501, 7816, 501, 7818, 501, 7820, 501, 7822, 501, 7824, 501, 7826, 501, 7828, 501, 7838, -7115, 7840, 501, 7842, 501, 7844, 501, 7846, 501, 7848, 501, 7850, 501, 7852, 501, 7854, 501, 7856, 501, 7858, 501, 7860, 501, 7862, 501, 7864, 501, 7866, 501, 7868, 501, 7870, 501, 7872, 501, 7874, 501, 7876, 501, 7878, 501, 7880, 501, 7882, 501, 7884, 501, 7886, 501, 7888, 501, 7890, 501, 7892, 501, 7894, 501, 7896, 501, 7898, 501, 7900, 501, 7902, 501, 7904, 501, 7906, 501, 7908, 501, 7910, 501, 7912, 501, 7914, 501, 7916, 501, 7918, 501, 7920, 501, 7922, 501, 7924, 501, 7926, 501, 7928, 501, 7930, 501, 7932, 501, 7934, 501, 8025, 492, 8027, 492, 8029, 492, 8031, 492, 8124, 491, 8140, 491, 8172, 493, 8188, 491, 8486, -7017, 8490, -7883, 8491, -7762, 8498, 528, 8579, 501, 11360, 501, 11362, -10243, 11363, -3314, 11364, -10227, 11367, 501, 11369, 501, 11371, 501, 11373, -10280, 11374, -10249, 11375, -10283, 11376, -10282, 11378, 501, 11381, 501, 11392, 501, 11394, 501, 11396, 501, 11398, 501, 11400, 501, 11402, 501, 11404, 501, 11406, 501, 11408, 501, 11410, 501, 11412, 501, 11414, 501, 11416, 501, 11418, 501, 11420, 501, 11422, 501, 11424, 501, 11426, 501, 11428, 501, 11430, 501, 11432, 501, 11434, 501, 11436, 501, 11438, 501, 11440, 501, 11442, 501, 11444, 501, 11446, 501, 11448, 501, 11450, 501, 11452, 501, 11454, 501, 11456, 501, 11458, 501, 11460, 501, 11462, 501, 11464, 501, 11466, 501, 11468, 501, 11470, 501, 11472, 501, 11474, 501, 11476, 501, 11478, 501, 11480, 501, 11482, 501, 11484, 501, 11486, 501, 11488, 501, 11490, 501, 11499, 501, 11501, 501, 11506, 501, 42560, 501, 42562, 501, 42564, 501, 42566, 501, 42568, 501, 42570, 501, 42572, 501, 42574, 501, 42576, 501, 42578, 501, 42580, 501, 42582, 501, 42584, 501, 42586, 501, 42588, 501, 42590, 501, 42592, 501, 42594, 501, 42596, 501, 42598, 501, 42600, 501, 42602, 501, 42604, 501, 42624, 501, 42626, 501, 42628, 501, 42630, 501, 42632, 501, 42634, 501, 42636, 501, 42638, 501, 42640, 501, 42642, 501, 42644, 501, 42646, 501, 42648, 501, 42650, 501, 42786, 501, 42788, 501, 42790, 501, 42792, 501, 42794, 501, 42796, 501, 42798, 501, 42802, 501, 42804, 501, 42806, 501, 42808, 501, 42810, 501, 42812, 501, 42814, 501, 42816, 501, 42818, 501, 42820, 501, 42822, 501, 42824, 501, 42826, 501, 42828, 501, 42830, 501, 42832, 501, 42834, 501, 42836, 501, 42838, 501, 42840, 501, 42842, 501, 42844, 501, 42846, 501, 42848, 501, 42850, 501, 42852, 501, 42854, 501, 42856, 501, 42858, 501, 42860, 501, 42862, 501, 42873, 501, 42875, 501, 42877, -34832, 42878, 501, 42880, 501, 42882, 501, 42884, 501, 42886, 501, 42891, 501, 42893, -41780, 42896, 501, 42898, 501, 42902, 501, 42904, 501, 42906, 501, 42908, 501, 42910, 501, 42912, 501, 42914, 501, 42916, 501, 42918, 501, 42920, 501, 42922, -41808, 42923, -41819, 42924, -41815, 42925, -41805, 42926, -41808, 42928, -41758, 42929, -41782, 42930, -41761, 42931, 1428, 42932, 501, 42934, 501, 42936, 501, 42938, 501, 42940, 501, 42942, 501, 42946, 501, 42948, 452, 42949, -41807, 42950, -34884]);
var state_671088653 = [{a0: 1773455756, a1: 4275166512}];
if (globalThis.utcInstance_872416692 === undefined) {
  globalThis.utcInstance_872416692 = [null];
}
if (globalThis.localInstance_872416693 === undefined) {
  globalThis.localInstance_872416693 = [null];
}
var params_1174405140 = [{particleCount: 0.2, worldSpeed: 0.5, size: 0.01, mass: 0.1, flicker: 0.4, flickerRatio: 0.5, glitter: 0.95, glitterRatio: 0.6, weirdBounce: 1.0, attraction: 0.06, attractionRadius: 0.2, gravity: 0.5, windowWidth: 1000.0, windowHeight: 1000.0, frameRate: 30.0, sizeFactor: 0.2, width: 1.0, height: 0.0}];
params_1174405140[0].windowWidth = window.innerWidth;
params_1174405140[0].windowHeight = window.innerHeight;
params_1174405140[0].height = (params_1174405140[0].windowHeight / params_1174405140[0].windowWidth);

function HEX3Aanonymous_1174405187(newValue_1174405188) {
    params_1174405140[0].particleCount = newValue_1174405188;

  
}

function HEX3Aanonymous_1174405194(newValue_1174405195) {
    params_1174405140[0].worldSpeed = newValue_1174405195;

  
}

function HEX3Aanonymous_1174405201(newValue_1174405202) {
    params_1174405140[0].size = newValue_1174405202;

  
}

function HEX3Aanonymous_1174405208(newValue_1174405209) {
    params_1174405140[0].mass = newValue_1174405209;

  
}

function HEX3Aanonymous_1174405215(newValue_1174405216) {
    params_1174405140[0].flicker = newValue_1174405216;

  
}

function HEX3Aanonymous_1174405222(newValue_1174405223) {
    params_1174405140[0].flickerRatio = newValue_1174405223;

  
}

function HEX3Aanonymous_1174405229(newValue_1174405230) {
    params_1174405140[0].glitter = newValue_1174405230;

  
}

function HEX3Aanonymous_1174405236(newValue_1174405237) {
    params_1174405140[0].glitterRatio = newValue_1174405237;

  
}

function HEX3Aanonymous_1174405243(newValue_1174405244) {
    params_1174405140[0].weirdBounce = newValue_1174405244;

  
}

function HEX3Aanonymous_1174405250(newValue_1174405251) {
    params_1174405140[0].attraction = newValue_1174405251;

  
}

function HEX3Aanonymous_1174405257(newValue_1174405258) {
    params_1174405140[0].attractionRadius = newValue_1174405258;

  
}

function HEX3Aanonymous_1174405264(newValue_1174405265) {
    params_1174405140[0].gravity = newValue_1174405265;

  
}

function HEX3Aanonymous_1174405271(newValue_1174405272) {
    params_1174405140[0].windowHeight = newValue_1174405272;

  
}

function HEX3Aanonymous_1174405278(newValue_1174405279) {
    params_1174405140[0].frameRate = newValue_1174405279;

  
}

function HEX3Aanonymous_1174405285(newValue_1174405286) {
    params_1174405140[0].sizeFactor = newValue_1174405286;

  
}

function HEX3Aanonymous_1174405292(newValue_1174405293) {
    params_1174405140[0].width = newValue_1174405293;

  
}

function HEX3Aanonymous_1174405299(newValue_1174405300) {
    params_1174405140[0].height = newValue_1174405300;

  
}
var updaters_1174405182 = [[null, null, null, null, null, null, null, null, null, null, null, null]];
var i_1174405183 = [0];
Label1: {
    Label2: while (true) {
    if (!true) break Label2;
      var p_1174405189 = [HEX3Aanonymous_1174405187];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405189[0];
      i_1174405183[0] += 1;
      var p_1174405196 = [HEX3Aanonymous_1174405194];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405196[0];
      i_1174405183[0] += 1;
      var p_1174405203 = [HEX3Aanonymous_1174405201];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405203[0];
      i_1174405183[0] += 1;
      var p_1174405210 = [HEX3Aanonymous_1174405208];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405210[0];
      i_1174405183[0] += 1;
      var p_1174405217 = [HEX3Aanonymous_1174405215];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405217[0];
      i_1174405183[0] += 1;
      var p_1174405224 = [HEX3Aanonymous_1174405222];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405224[0];
      i_1174405183[0] += 1;
      var p_1174405231 = [HEX3Aanonymous_1174405229];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405231[0];
      i_1174405183[0] += 1;
      var p_1174405238 = [HEX3Aanonymous_1174405236];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405238[0];
      i_1174405183[0] += 1;
      var p_1174405245 = [HEX3Aanonymous_1174405243];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405245[0];
      i_1174405183[0] += 1;
      var p_1174405252 = [HEX3Aanonymous_1174405250];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405252[0];
      i_1174405183[0] += 1;
      var p_1174405259 = [HEX3Aanonymous_1174405257];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405259[0];
      i_1174405183[0] += 1;
      var p_1174405266 = [HEX3Aanonymous_1174405264];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405266[0];
      i_1174405183[0] += 1;
      break Label1;
      var p_1174405273 = [HEX3Aanonymous_1174405271];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405273[0];
      i_1174405183[0] += 1;
      var p_1174405280 = [HEX3Aanonymous_1174405278];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405280[0];
      i_1174405183[0] += 1;
      var p_1174405287 = [HEX3Aanonymous_1174405285];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405287[0];
      i_1174405183[0] += 1;
      var p_1174405294 = [HEX3Aanonymous_1174405292];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405294[0];
      i_1174405183[0] += 1;
      var p_1174405301 = [HEX3Aanonymous_1174405299];
      updaters_1174405182[0][i_1174405183[0]] = p_1174405301[0];
      i_1174405183[0] += 1;
      break Label1;
    }
};

function isFatPointer_33557074(ti_33557075) {
  var result_33557076 = false;

  BeforeRet: {
    result_33557076 = !((ConstSet1[ti_33557075.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557076;

}

function nimCopyAux(dest_33557087, src_33557088, n_33557089) {
    switch (n_33557089.kind) {
    case 0:
      break;
    case 1:
            dest_33557087[n_33557089.offset] = nimCopy(dest_33557087[n_33557089.offset], src_33557088[n_33557089.offset], n_33557089.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557089.sons.length; i++) {
      nimCopyAux(dest_33557087, src_33557088, n_33557089.sons[i]);
    }
    
      break;
    case 3:
            dest_33557087[n_33557089.offset] = nimCopy(dest_33557087[n_33557089.offset], src_33557088[n_33557089.offset], n_33557089.typ);
      for (var i = 0; i < n_33557089.sons.length; ++i) {
        nimCopyAux(dest_33557087, src_33557088, n_33557089.sons[i][1]);
      }
    
      break;
    }

  
}
var pages_1107296277 = [[new Float64Array(700000), new Float64Array(700000)]];
Label1: {
  var p_1107296286 = [0];
  var res_1107296329 = 0;
  Label2: {
      Label3: while (true) {
      if (!(res_1107296329 <= 1)) break Label3;
        p_1107296286[0] = res_1107296329;
        Label4: {
          var i_1107296296 = [0];
          var res_1107296327 = 0;
          Label5: {
              Label6: while (true) {
              if (!(res_1107296327 <= 699999)) break Label6;
                i_1107296296[0] = res_1107296327;
                pages_1107296277[0][p_1107296286[0]][i_1107296296[0]] = 0.0;
                res_1107296327 += 1;
              }
          };
        };
        res_1107296329 += 1;
      }
  };
};
var state_1107296297 = [{pages: nimCopy(null, pages_1107296277[0], NTI1107296300), currentPage: 0}];

function newSeq_1325400074(len_1325400076) {
  var result_1325400077 = [];

    result_1325400077 = new Array(len_1325400076); for (var i = 0 ; i < len_1325400076 ; ++i) { result_1325400077[i] = {Field0: {Field0: 0.0, Field1: 0.0, Field2: 0.0}, Field1: {Field0: 0.0, Field1: 0.0, Field2: 0.0}}; }
  return result_1325400077;

}
var matrix_1325400068 = [{Field0: {Field0: 1.0, Field1: 0.0, Field2: 0.0}, Field1: {Field0: 0.0, Field1: 1.0, Field2: 0.0}}];
var reverse_matrix_1325400069 = [{Field0: {Field0: 1.0, Field1: 0.0, Field2: 0.0}, Field1: {Field0: 0.0, Field1: 1.0, Field2: 0.0}}];
var transformationStack_1325400100 = [newSeq_1325400074(0)];

function newSeq_1375731730(len_1375731732) {
  var result_1375731733 = [];

    result_1375731733 = new Array(len_1375731732); for (var i = 0 ; i < len_1375731732 ; ++i) { result_1375731733[i] = 0; }
  return result_1375731733;

}
var canvas_1375731717 = [null];
var context_1375731718 = [null];
var pixels_1375731719 = [null];
var strokeColor_1375731720 = [new Uint8Array(4)];
var fillColor_1375731721 = [new Uint8Array(4)];
var mouseX_1375731722 = [0];
var mouseY_1375731723 = [0];
var keys_1375731724 = [new Uint8Array(256)];
var mouseButtons_1375731725 = [new Uint8Array(8)];
var keysToClear_1375731747 = [newSeq_1375731730(0)];
var mouseButtonsToClear_1375731755 = [newSeq_1375731730(0)];
var frameRate_1375731756 = [60];

function insert_1375732110(x_1375732112, x_1375732112_Idx, item_1375732113, i_1375732114) {
    var it_1375732135 = 0;
    x_1375732112[x_1375732112_Idx] = x_1375732112[x_1375732112_Idx] || []; x_1375732112[x_1375732112_Idx].splice(i_1375732114, 0, it_1375732135);
    x_1375732112[x_1375732112_Idx][i_1375732114] = item_1375732113;

  
}

function HEX3Aanonymous_1375732072(e_1375732073) {
    var event_1375732074 = e_1375732073;
    mouseX_1375731722[0] = ((event_1375732074.clientX - canvas_1375731717[0].offsetLeft) + ((window.scrollX) | 0));
    mouseY_1375731723[0] = ((event_1375732074.clientY - canvas_1375731717[0].offsetTop) + ((window.scrollY) | 0));

  
}

function HEX3Aanonymous_1375732094(e_1375732095) {
    var event_1375732096 = e_1375732095;
    keys_1375731724[0][event_1375732096.keyCode] = true;

  
}

function HEX3Aanonymous_1375732107(e_1375732108) {
    var event_1375732109 = e_1375732108;
    insert_1375732110(keysToClear_1375731747, 0, event_1375732109.keyCode, 0);

  
}

function HEX3Aanonymous_1375732137(e_1375732138) {
    var event_1375732139 = e_1375732138;
    mouseButtons_1375731725[0][event_1375732139.button] = true;

  
}

function HEX3Aanonymous_1375732150(e_1375732151) {
    var event_1375732152 = e_1375732151;
    insert_1375732110(mouseButtonsToClear_1375731755, 0, event_1375732152.button, 0);

  
}
var updateMousePos_1375732093 = HEX3Aanonymous_1375732072;
window.addEventListener("mousemove", updateMousePos_1375732093, false);
var keydown_1375732106 = HEX3Aanonymous_1375732094;
var keyup_1375732136 = HEX3Aanonymous_1375732107;
document.addEventListener("keydown", keydown_1375732106, false);
document.addEventListener("keyup", keyup_1375732136, false);
var mousedown_1375732149 = HEX3Aanonymous_1375732137;
var mouseup_1375732158 = HEX3Aanonymous_1375732150;
document.addEventListener("mousedown", mousedown_1375732149, false);
document.addEventListener("mouseup", mouseup_1375732158, false);

function newColorRGB_1358954555(r_1358954556, g_1358954557, b_1358954558, a_1358954559) {
  var result_1358954560 = ({mode: 0, r: 0.0, g: 0.0, b: 0.0, h: 0, s: 0.0, v: 0.0, a: 0.0});

    result_1358954560 = nimCopy(result_1358954560, {mode: 0, r: r_1358954556, g: g_1358954557, b: b_1358954558, a: a_1358954559, h: 0, s: 0.0, v: 0.0}, NTI1358954500);

  return result_1358954560;

}
var fillColor_1358954567 = [newColorRGB_1358954555(1.0, 1.0, 1.0, 1.0)];
var strokeColor_1358954568 = [newColorRGB_1358954555(0.0, 0.0, 0.0, 1.0)];
var backgroundColor_1358954569 = [newColorRGB_1358954555(0.0, 0.0, 0.0, 1.0)];
var colorMode_1358954570 = [0];

function newSeq_1342177300(len_1342177302) {
  var result_1342177303 = [];

    result_1342177303 = new Array(len_1342177302); for (var i = 0 ; i < len_1342177302 ; ++i) { result_1342177303[i] = ({vertices: [], drawKind: 0}); }
  return result_1342177303;

}
var drawingStack_1342177326 = [newSeq_1342177300(0)];
var height_1308622855 = [0];
var width_1308622856 = [0];
var frameCount_1308622857 = [0];
var time_1308622858 = [0.0];
var deltaTime_1308622859 = [0.0];
var font_1509949441 = [new Int32Array([0, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 10, 5, 21, 5, 7, -1, -1, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 16, 4, 21, 4, 14, -1, -1, 12, 21, 12, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 21, 11, 25, 4, -7, -1, -1, 17, 25, 10, -7, -1, -1, 4, 12, 18, 12, -1, -1, 3, 6, 17, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 20, 8, 25, 8, -4, -1, -1, 12, 25, 12, -4, -1, -1, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 24, 21, 21, 3, 0, -1, -1, 8, 21, 10, 19, 10, 17, 9, 15, 7, 14, 5, 14, 3, 16, 3, 18, 4, 20, 6, 21, 8, 21, 10, 20, 13, 19, 16, 19, 19, 20, 21, 21, -1, -1, 17, 7, 15, 6, 14, 4, 14, 2, 16, 0, 18, 0, 20, 1, 21, 3, 21, 5, 19, 7, 17, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 26, 23, 12, 23, 13, 22, 14, 21, 14, 20, 13, 19, 11, 17, 6, 15, 3, 13, 1, 11, 0, 7, 0, 5, 1, 4, 2, 3, 4, 3, 6, 4, 8, 5, 9, 12, 13, 13, 14, 14, 16, 14, 18, 13, 20, 11, 21, 9, 20, 8, 18, 8, 16, 9, 13, 11, 10, 16, 3, 18, 1, 20, 0, 22, 0, 23, 1, 23, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 5, 19, 4, 20, 5, 21, 6, 20, 6, 18, 5, 16, 4, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 14, 11, 25, 9, 23, 7, 20, 5, 16, 4, 11, 4, 7, 5, 2, 7, -2, 9, -5, 11, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 14, 3, 25, 5, 23, 7, 20, 9, 16, 10, 11, 10, 7, 9, 2, 7, -2, 5, -5, 3, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 16, 8, 21, 8, 9, -1, -1, 3, 18, 13, 12, -1, -1, 13, 18, 3, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 26, 13, 18, 13, 0, -1, -1, 4, 9, 22, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 10, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 26, 4, 9, 22, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 10, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 22, 20, 25, 2, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 20, 9, 21, 6, 20, 4, 17, 3, 12, 3, 9, 4, 4, 6, 1, 9, 0, 11, 0, 14, 1, 16, 4, 17, 9, 17, 12, 16, 17, 14, 20, 11, 21, 9, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 20, 6, 17, 8, 18, 11, 21, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 20, 4, 16, 4, 17, 5, 19, 6, 20, 8, 21, 12, 21, 14, 20, 15, 19, 16, 17, 16, 15, 15, 13, 13, 10, 3, 0, 17, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 20, 5, 21, 16, 21, 10, 13, 13, 13, 15, 12, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 20, 13, 21, 3, 7, 18, 7, -1, -1, 13, 21, 13, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 20, 15, 21, 5, 21, 4, 12, 5, 13, 8, 14, 11, 14, 14, 13, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 20, 16, 18, 15, 20, 12, 21, 10, 21, 7, 20, 5, 17, 4, 12, 4, 7, 5, 3, 7, 1, 10, 0, 11, 0, 14, 1, 16, 3, 17, 6, 17, 7, 16, 10, 14, 12, 11, 13, 10, 13, 7, 12, 5, 10, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 20, 17, 21, 7, 0, -1, -1, 3, 21, 17, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, 20, 8, 21, 5, 20, 4, 18, 4, 16, 5, 14, 7, 13, 11, 12, 14, 11, 16, 9, 17, 7, 17, 4, 16, 2, 15, 1, 12, 0, 8, 0, 5, 1, 4, 2, 3, 4, 3, 7, 4, 9, 6, 11, 9, 12, 13, 13, 15, 14, 16, 16, 16, 18, 15, 20, 12, 21, 8, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 20, 16, 14, 15, 11, 13, 9, 10, 8, 9, 8, 6, 9, 4, 11, 3, 14, 3, 15, 4, 18, 6, 20, 9, 21, 10, 21, 13, 20, 15, 18, 16, 14, 16, 9, 15, 4, 13, 1, 10, 0, 8, 0, 5, 1, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, -1, -1, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, -1, -1, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 24, 20, 18, 4, 9, 20, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 26, 4, 12, 22, 12, -1, -1, 4, 6, 22, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 24, 4, 18, 20, 9, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 18, 3, 16, 3, 17, 4, 19, 5, 20, 7, 21, 11, 21, 13, 20, 14, 19, 15, 17, 15, 15, 14, 13, 13, 12, 9, 10, 9, 7, -1, -1, 9, 2, 8, 1, 9, 0, 10, 1, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 27, 18, 13, 17, 15, 15, 16, 12, 16, 10, 15, 9, 14, 8, 11, 8, 8, 9, 6, 11, 5, 14, 5, 16, 6, 17, 8, -1, -1, 12, 16, 10, 14, 9, 11, 9, 8, 10, 6, 11, 5, -1, -1, 18, 16, 17, 8, 17, 6, 19, 5, 21, 5, 23, 7, 24, 10, 24, 12, 23, 15, 22, 17, 20, 19, 18, 20, 15, 21, 12, 21, 9, 20, 7, 19, 5, 17, 4, 15, 3, 12, 3, 9, 4, 6, 5, 4, 7, 2, 9, 1, 12, 0, 15, 0, 18, 1, 20, 2, 21, 3, -1, -1, 19, 16, 18, 8, 18, 6, 19, 5, 8, 18, 9, 21, 1, 0, -1, -1, 9, 21, 17, 0, -1, -1, 4, 7, 14, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 21, 4, 21, 4, 0, -1, -1, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, -1, -1, 4, 11, 13, 11, 16, 10, 17, 9, 18, 7, 18, 4, 17, 2, 16, 1, 13, 0, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 21, 4, 21, 4, 0, -1, -1, 4, 21, 11, 21, 14, 20, 16, 18, 17, 16, 18, 13, 18, 8, 17, 5, 16, 3, 14, 1, 11, 0, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 19, 4, 21, 4, 0, -1, -1, 4, 21, 17, 21, -1, -1, 4, 11, 12, 11, -1, -1, 4, 0, 17, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 18, 4, 21, 4, 0, -1, -1, 4, 21, 17, 21, -1, -1, 4, 11, 12, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 18, 8, -1, -1, 13, 8, 18, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 22, 4, 21, 4, 0, -1, -1, 18, 21, 18, 0, -1, -1, 4, 11, 18, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 4, 21, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 16, 12, 21, 12, 5, 11, 2, 10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 21, 4, 21, 4, 0, -1, -1, 18, 21, 4, 7, -1, -1, 9, 12, 18, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 17, 4, 21, 4, 0, -1, -1, 4, 0, 16, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 24, 4, 21, 4, 0, -1, -1, 4, 21, 12, 0, -1, -1, 20, 21, 12, 0, -1, -1, 20, 21, 20, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 22, 4, 21, 4, 0, -1, -1, 4, 21, 18, 0, -1, -1, 18, 21, 18, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 21, 4, 21, 4, 0, -1, -1, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 14, 17, 12, 16, 11, 13, 10, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, -1, -1, 12, 4, 18, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 21, 4, 21, 4, 0, -1, -1, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, 4, 11, -1, -1, 11, 11, 18, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 16, 8, 21, 8, 0, -1, -1, 1, 21, 15, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 22, 4, 21, 4, 6, 5, 3, 7, 1, 10, 0, 12, 0, 15, 1, 17, 3, 18, 6, 18, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 18, 1, 21, 9, 0, -1, -1, 17, 21, 9, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 24, 2, 21, 7, 0, -1, -1, 12, 21, 7, 0, -1, -1, 12, 21, 17, 0, -1, -1, 22, 21, 17, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 20, 3, 21, 17, 0, -1, -1, 17, 21, 3, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 18, 1, 21, 9, 11, 9, 0, -1, -1, 17, 21, 9, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 20, 17, 21, 3, 0, -1, -1, 3, 21, 17, 21, -1, -1, 3, 0, 17, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 14, 4, 25, 4, -7, -1, -1, 5, 25, 5, -7, -1, -1, 4, 25, 11, 25, -1, -1, 4, -7, 11, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 14, 0, 21, 14, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 14, 9, 25, 9, -7, -1, -1, 10, 25, 10, -7, -1, -1, 3, 25, 10, 25, -1, -1, 3, -7, 10, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 16, 6, 15, 8, 18, 10, 15, -1, -1, 3, 12, 8, 17, 13, 12, -1, -1, 8, 17, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 16, 0, -2, 16, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 21, 5, 20, 4, 18, 4, 16, 5, 15, 6, 16, 5, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 15, 14, 15, 0, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 4, 21, 4, 0, -1, -1, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 18, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 15, 21, 15, 0, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 18, 3, 8, 15, 8, 15, 10, 14, 12, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 12, 10, 21, 8, 21, 6, 20, 5, 17, 5, 0, -1, -1, 2, 14, 9, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 19, 15, 14, 15, -2, 14, -5, 13, -6, 11, -7, 8, -7, 6, -6, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 19, 4, 21, 4, 0, -1, -1, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 8, 3, 21, 4, 20, 5, 21, 4, 22, 3, 21, -1, -1, 4, 14, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 10, 5, 21, 6, 20, 7, 21, 6, 22, 5, 21, -1, -1, 6, 14, 6, -3, 5, -6, 3, -7, 1, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 17, 4, 21, 4, 0, -1, -1, 14, 14, 4, 4, -1, -1, 8, 8, 15, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 4, 21, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, 30, 4, 14, 4, 0, -1, -1, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, -1, -1, 15, 10, 18, 13, 20, 14, 23, 14, 25, 13, 26, 10, 26, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 19, 4, 14, 4, 0, -1, -1, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, 16, 6, 16, 8, 15, 11, 13, 13, 11, 14, 8, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 4, 14, 4, -7, -1, -1, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 19, 15, 14, 15, -7, -1, -1, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 13, 4, 14, 4, 0, -1, -1, 4, 8, 5, 11, 7, 13, 9, 14, 12, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, 17, 14, 11, 13, 13, 10, 14, 7, 14, 4, 13, 3, 11, 4, 9, 6, 8, 11, 7, 13, 6, 14, 4, 14, 3, 13, 1, 10, 0, 7, 0, 4, 1, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 12, 5, 21, 5, 4, 6, 1, 8, 0, 10, 0, -1, -1, 2, 14, 9, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 19, 4, 14, 4, 4, 5, 1, 7, 0, 10, 0, 12, 1, 15, 4, -1, -1, 15, 14, 15, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 16, 2, 14, 8, 0, -1, -1, 14, 14, 8, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 22, 3, 14, 7, 0, -1, -1, 11, 14, 7, 0, -1, -1, 11, 14, 15, 0, -1, -1, 19, 14, 15, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 17, 3, 14, 14, 0, -1, -1, 14, 14, 3, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 16, 2, 14, 8, 0, -1, -1, 14, 14, 8, 0, 6, -4, 4, -6, 2, -7, 1, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 17, 14, 14, 3, 0, -1, -1, 3, 14, 14, 14, -1, -1, 3, 0, 14, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 14, 9, 25, 7, 24, 6, 23, 5, 21, 5, 19, 6, 17, 7, 16, 8, 14, 8, 12, 6, 10, -1, -1, 7, 24, 6, 22, 6, 20, 7, 18, 8, 17, 9, 15, 9, 13, 8, 11, 4, 9, 8, 7, 9, 5, 9, 3, 8, 1, 7, 0, 6, -2, 6, -4, 7, -6, -1, -1, 6, 8, 8, 6, 8, 4, 7, 2, 6, 1, 5, -1, 5, -3, 6, -5, 7, -6, 9, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 4, 25, 4, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, 14, 5, 25, 7, 24, 8, 23, 9, 21, 9, 19, 8, 17, 7, 16, 6, 14, 6, 12, 8, 10, -1, -1, 7, 24, 8, 22, 8, 20, 7, 18, 6, 17, 5, 15, 5, 13, 6, 11, 10, 9, 6, 7, 5, 5, 5, 3, 6, 1, 7, 0, 8, -2, 8, -4, 7, -6, -1, -1, 8, 8, 6, 6, 6, 4, 7, 2, 8, 1, 9, -1, 9, -3, 8, -5, 7, -6, 5, -7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 24, 3, 6, 3, 8, 4, 11, 6, 12, 8, 12, 10, 11, 14, 8, 16, 7, 18, 7, 20, 8, 21, 10, -1, -1, 3, 8, 4, 10, 6, 11, 8, 11, 10, 10, 14, 7, 16, 6, 18, 6, 20, 7, 21, 10, 21, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])];
var refVal_1459617853 = [0.0];

function setFrameRate_1375732195(newFrameRate_1375732196) {
    frameRate_1375731756[0] = newFrameRate_1375732196;

  
}

function setFrameRate_1308622860(frameRate_1308622861) {
    setFrameRate_1375732195(frameRate_1308622861);

  
}

function setColorMode_1358954571(mode_1358954572) {
    colorMode_1358954570[0] = mode_1358954572;

  
}

function newSeq_536871149(len_536871151) {
  var result_536871152 = [];

    result_536871152 = new Array(len_536871151); for (var i = 0 ; i < len_536871151 ; ++i) { result_536871152[i] = null; }
  return result_536871152;

}

function toFloat_33556023(i_33556024) {
  var result_33556025 = 0.0;

    result_33556025 = i_33556024;

  return result_33556025;

}

function HEX2F_33556035(x_33556036, y_33556037) {
  var result_33556038 = 0.0;

    result_33556038 = (toFloat_33556023(x_33556036) / toFloat_33556023(y_33556037));

  return result_33556038;

}

function epochTime_872418737() {
  var result_872418738 = 0.0;

    result_872418738 = HEX2F_33556035(new Date().getTime(), 1000);

  return result_872418738;

}

function newSeq_33556765(len_33556767) {
  var result_33556768 = [];

    result_33556768 = new Array(len_33556767); for (var i = 0 ; i < len_33556767 ; ++i) { result_33556768[i] = null; }
  return result_33556768;

}

function initialize_1375732197(name_1375732198, w_1375732199, h_1375732200) {
    name_1375732198 = nimCopy(null, name_1375732198, NTI33554449);
    
function HEX3Aanonymous_1375732201(e_1375732202) {
        var root_1375732203 = document.getElementById(toJSStr(name_1375732198));
        canvas_1375731717[0] = document.createElement("canvas");
        canvas_1375731717[0].width = w_1375732199;
        canvas_1375731717[0].height = h_1375732200;
        root_1375732203.appendChild(canvas_1375731717[0]);
        context_1375731718[0] = canvas_1375731717[0].getContext('2d');

      
    }

    window.onload = HEX3Aanonymous_1375732201;

  
}

function add_33556386(x_33556387, x_33556387_Idx, y_33556388) {
          if (x_33556387[x_33556387_Idx] === null) { x_33556387[x_33556387_Idx] = []; }
      var off = x_33556387[x_33556387_Idx].length;
      x_33556387[x_33556387_Idx].length += y_33556388.length;
      for (var i = 0; i < y_33556388.length; ++i) {
        x_33556387[x_33556387_Idx][off+i] = y_33556388.charCodeAt(i);
      }
    

  
}

function unhandledException(e_33556603) {
    var buf_33556604 = [[]];
    if (!(((e_33556603.message).length == 0))) {
    buf_33556604[0].push.apply(buf_33556604[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556604[0].push.apply(buf_33556604[0], e_33556603.message);;
    }
    else {
    buf_33556604[0].push.apply(buf_33556604[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556604[0].push.apply(buf_33556604[0], [32,91]);;
    add_33556386(buf_33556604, 0, e_33556603.name);
    buf_33556604[0].push.apply(buf_33556604[0], [93,10]);;
    var cbuf_33556605 = toJSStr(buf_33556604[0]);
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556605);
  }
  else {
    throw cbuf_33556605;
  }
  

  
}

function sysFatal_268435493(message_268435496) {
    raiseException({message: nimCopy(null, message_268435496, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_268435491(msg_268435492) {
    sysFatal_268435493(msg_268435492);

  
}

function failedAssertImpl_268435515(msg_268435516) {
    raiseAssert_268435491(msg_268435516);

  
}

function delete_1375732254(s_1375732256, s_1375732256_Idx, first_1375732257, last_1375732258) {
  BeforeRet: {
    if (!((first_1375732257 <= last_1375732258))) {
    failedAssertImpl_268435515([115,101,113,117,116,105,108,115,46,110,105,109,40,53,54,57,44,32,51,41,32,96,102,105,114,115,116,32,60,61,32,108,97,115,116,96,32]);
    }
    
    if (((s_1375732256[s_1375732256_Idx]).length <= first_1375732257)) {
    break BeforeRet;
    }
    
    var i_1375732267 = first_1375732257;
    var j_1375732271 = nimMin((s_1375732256[s_1375732256_Idx]).length, (last_1375732258 + 1));
    var newLen_1375732275 = (((s_1375732256[s_1375732256_Idx]).length - j_1375732271) + i_1375732267);
    Label1: {
        Label2: while (true) {
        if (!(i_1375732267 < newLen_1375732275)) break Label2;
          s_1375732256[s_1375732256_Idx][i_1375732267] = s_1375732256[s_1375732256_Idx][j_1375732271];
          i_1375732267 += 1;
          j_1375732271 += 1;
        }
    };
    if (s_1375732256[s_1375732256_Idx].length < newLen_1375732275) { for (var i = s_1375732256[s_1375732256_Idx].length ; i < newLen_1375732275 ; ++i) s_1375732256[s_1375732256_Idx].push(0); }
               else { s_1375732256[s_1375732256_Idx].length = newLen_1375732275; };
  };

  
}

function drawAndClearInput_1375732222(draw_1375732224) {
    
function HEX3Aanonymous_1375732227() {
        draw_1375732224();
        Label1: {
          var key_1375732247 = 0;
          var i_536871286 = 0;
          var L_536871287 = (keysToClear_1375731747[0]).length;
          Label2: {
              Label3: while (true) {
              if (!(i_536871286 < L_536871287)) break Label3;
                key_1375732247 = keysToClear_1375731747[0][i_536871286];
                keys_1375731724[0][key_1375732247] = false;
                i_536871286 += 1;
              }
          };
        };
        if ((0 < (keysToClear_1375731747[0]).length)) {
        delete_1375732254(keysToClear_1375731747, 0, 0, ((keysToClear_1375731747[0]).length - 1));
        }
        
        Label4: {
          var btn_1375732297 = 0;
          var i_536871290 = 0;
          var L_536871291 = (mouseButtonsToClear_1375731755[0]).length;
          Label5: {
              Label6: while (true) {
              if (!(i_536871290 < L_536871291)) break Label6;
                btn_1375732297 = mouseButtonsToClear_1375731755[0][i_536871290];
                mouseButtons_1375731725[0][btn_1375732297] = false;
                i_536871290 += 1;
              }
          };
        };
        if ((0 < (mouseButtonsToClear_1375731755[0]).length)) {
        delete_1375732254(mouseButtonsToClear_1375731755, 0, 0, ((mouseButtonsToClear_1375731755[0]).length - 1));
        }
        

      
    }

  var result_1375732226 = null;

    result_1375732226 = HEX3Aanonymous_1375732227;

  return result_1375732226;

}

function run_1375732318(w_1375732319, h_1375732320, draw_1375732322, setup_1375732324, name_1375732325) {
    
function HEX3Aanonymous_1375732329() {
        var _ = setTimeout(recursion_1375732327, Math.trunc(1000 / frameRate_1375731756[0]));
        var _ = setTimeout(drawFrame_1375732328, 0);

      
    }

    initialize_1375732197(name_1375732325, w_1375732319, h_1375732320);
    var _ = setTimeout(setup_1375732324, 0);
    var recursion_1375732327 = null;
    var drawFrame_1375732328 = drawAndClearInput_1375732222(draw_1375732322);
    recursion_1375732327 = HEX3Aanonymous_1375732329;
    var _ = setTimeout(recursion_1375732327, 0);

  
}

function resetTransform_1325400190() {
    var colontmp__536871294 = {Field0: 1.0, Field1: 0.0, Field2: 0.0};
    var colontmp__536871295 = {Field0: 0.0, Field1: 1.0, Field2: 0.0};
    matrix_1325400068[0] = nimCopy(matrix_1325400068[0], {Field0: nimCopy(null, colontmp__536871294, NTI1325400076), Field1: nimCopy(null, colontmp__536871295, NTI1325400077)}, NTI1325400075);
    var colontmp__536871296 = {Field0: 1.0, Field1: 0.0, Field2: 0.0};
    var colontmp__536871297 = {Field0: 0.0, Field1: 1.0, Field2: 0.0};
    reverse_matrix_1325400069[0] = nimCopy(reverse_matrix_1325400069[0], {Field0: nimCopy(null, colontmp__536871296, NTI1325400079), Field1: nimCopy(null, colontmp__536871297, NTI1325400080)}, NTI1325400078);

  
}

function drawWrapper_1308622862(draw_1308622864) {
    
function HEX3Aanonymous_1308622867() {
        resetTransform_1325400190();
        frameCount_1308622857[0] += 1;
        deltaTime_1308622859[0] = (epochTime_872418737() - time_1308622858[0]);
        time_1308622858[0] = epochTime_872418737();
        draw_1308622864();

      
    }

  var result_1308622866 = null;

  BeforeRet: {
    result_1308622866 = HEX3Aanonymous_1308622867;
    break BeforeRet;
  };

  return result_1308622866;

}

function run_1308622872(w_1308622873, h_1308622874, draw_1308622876, setup_1308622879, name_1308622880) {
    width_1308622856[0] = w_1308622873;
    height_1308622855[0] = h_1308622874;
    time_1308622858[0] = epochTime_872418737();
    run_1375732318(w_1308622873, h_1308622874, drawWrapper_1308622862(draw_1308622876), setup_1308622879, name_1308622880);

  
}

function newColorRGB_1358954561(r_1358954562, g_1358954563, b_1358954564, a_1358954565) {
  var result_1358954566 = ({mode: 0, r: 0.0, g: 0.0, b: 0.0, h: 0, s: 0.0, v: 0.0, a: 0.0});

    result_1358954566 = nimCopy(result_1358954566, {mode: 0, r: HEX2F_33556035(r_1358954562, 255), g: HEX2F_33556035(g_1358954563, 255), b: HEX2F_33556035(b_1358954564, 255), a: HEX2F_33556035(a_1358954565, 255), h: 0, s: 0.0, v: 0.0}, NTI1358954500);

  return result_1358954566;

}

function newColorHSV_1358954549(h_1358954550, s_1358954551, v_1358954552, a_1358954553) {
  var result_1358954554 = ({mode: 0, r: 0.0, g: 0.0, b: 0.0, h: 0, s: 0.0, v: 0.0, a: 0.0});

    result_1358954554 = nimCopy(result_1358954554, {mode: 1, h: h_1358954550, s: HEX2F_33556035(s_1358954551, 100), v: HEX2F_33556035(v_1358954552, 100), a: HEX2F_33556035(a_1358954553, 255), r: 0.0, g: 0.0, b: 0.0}, NTI1358954500);

  return result_1358954554;

}

function nimFloatToString_385876095(a_385876096) {
  var result_385876097 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_385876096))
      result_385876097 = a_385876096 === 0 && 1 / a_385876096 < 0 ? "-0.0" : a_385876096+".0"
    else {
      result_385876097 = a_385876096+""
      if(nimOnlyDigitsOrMinus(result_385876097)){
        result_385876097 = a_385876096+".0"
      }
    }
  

  return result_385876097;

}

function addFloat_33557340(result_33557342, result_33557342_Idx, x_33557343) {
    add_33556386(result_33557342, result_33557342_Idx, nimFloatToString_385876095(x_33557343));

  
}

function HEX24_33557336(x_33557338) {
  var result_33557339 = [[]];

    addFloat_33557340(result_33557339, 0, x_33557338);

  return result_33557339[0];

}

function parseSaturatedNatural_922747286(s_922747287, b_922747288, b_922747288_Idx) {
      var Temporary1;
          var Temporary4;

  var result_922747289 = 0;

    var i_922747290 = 0;
    if (((i_922747290 < (s_922747287).length) && (s_922747287[i_922747290] == 43))) {
    i_922747290 += 1;
    }
    
      if (!(i_922747290 < (s_922747287).length)) Temporary1 = false; else {        Temporary1 = (ConstSet6[s_922747287[i_922747290]] != undefined);      }    if (Temporary1) {
    b_922747288[b_922747288_Idx] = 0;
    Label2: {
        Label3: while (true) {
          if (!(i_922747290 < (s_922747287).length)) Temporary4 = false; else {            Temporary4 = (ConstSet7[s_922747287[i_922747290]] != undefined);          }        if (!Temporary4) break Label3;
          var c_922747319 = (s_922747287[i_922747290] - 48);
          if ((b_922747288[b_922747288_Idx] <= Math.trunc((2147483647 - c_922747319) / 10))) {
          b_922747288[b_922747288_Idx] = ((b_922747288[b_922747288_Idx] * 10) + c_922747319);
          }
          else {
            b_922747288[b_922747288_Idx] = 2147483647;
          }
          
          i_922747290 += 1;
          Label5: {
              Label6: while (true) {
              if (!((i_922747290 < (s_922747287).length) && (s_922747287[i_922747290] == 95))) break Label6;
                i_922747290 += 1;
              }
          };
        }
    };
    result_922747289 = i_922747290;
    }
    

  return result_922747289;

}

function parseSaturatedNatural_922747673(s_922747674, b_922747675, b_922747675_Idx, start_922747676) {
  var result_922747677 = 0;

    result_922747677 = parseSaturatedNatural_922747286((s_922747674.slice(start_922747676, (s_922747674).length - 1 + 1)), b_922747675, b_922747675_Idx);

  return result_922747677;

}

function HEX5BHEX5D_889193745(s_889193748, x_889193749) {
  var result_889193750 = [];

    var a_889193752 = x_889193749.a;
    var L_889193754 = ((((s_889193748).length - x_889193749.b) - a_889193752) + 1);
    result_889193750 = nimCopy(null, mnewString(L_889193754), NTI33554449);
    Label1: {
      var i_889193759 = 0;
      var i_536871301 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_536871301 < L_889193754)) break Label3;
            i_889193759 = i_536871301;
            result_889193750[i_889193759] = s_889193748[(i_889193759 + a_889193752)];
            i_536871301 += 1;
          }
      };
    };

  return result_889193750;

}

function HEX2EHEX2E_939524192(a_939524195, b_939524196) {
  var result_939524199 = ({a: 0, b: 0});

    result_939524199 = nimCopy(result_939524199, {a: a_939524195, b: b_939524196}, NTI939524180);

  return result_939524199;

}

function parseStandardFormatSpecifier_1124073528(s_1124073529, start_1124073530, ignoreUnknownSuffix_1124073531) {
      var Temporary1;
      var Temporary2;

  var result_1124073532 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_1124073532.fill = 32;
    result_1124073532.align = 0;
    result_1124073532.sign = 45;
    var i_1124073534 = start_1124073530;
    if ((((i_1124073534 + 1) < (s_1124073529).length) && (ConstSet2[s_1124073529[(i_1124073534 + 1)]] != undefined))) {
    result_1124073532.fill = s_1124073529[i_1124073534];
    result_1124073532.align = s_1124073529[(i_1124073534 + 1)];
    i_1124073534 += 2;
    }
    else {
    if (((i_1124073534 < (s_1124073529).length) && (ConstSet3[s_1124073529[i_1124073534]] != undefined))) {
    result_1124073532.align = s_1124073529[i_1124073534];
    i_1124073534 += 1;
    }
    }
    if (((i_1124073534 < (s_1124073529).length) && (ConstSet4[s_1124073529[i_1124073534]] != undefined))) {
    result_1124073532.sign = s_1124073529[i_1124073534];
    i_1124073534 += 1;
    }
    
    if (((i_1124073534 < (s_1124073529).length) && (s_1124073529[i_1124073534] == 35))) {
    result_1124073532.alternateForm = true;
    i_1124073534 += 1;
    }
    
      if (!(((i_1124073534 + 1) < (s_1124073529).length) && (s_1124073529[i_1124073534] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet5[s_1124073529[(i_1124073534 + 1)]] != undefined);      }    if (Temporary1) {
    result_1124073532.padWithZero = true;
    i_1124073534 += 1;
    }
    
    var parsedLength_1124073576 = parseSaturatedNatural_922747673(s_1124073529, result_1124073532, "minimumWidth", i_1124073534);
    i_1124073534 += parsedLength_1124073576;
    if (((i_1124073534 < (s_1124073529).length) && (s_1124073529[i_1124073534] == 46))) {
    i_1124073534 += 1;
    var parsedLengthB_1124073587 = parseSaturatedNatural_922747673(s_1124073529, result_1124073532, "precision", i_1124073534);
    i_1124073534 += parsedLengthB_1124073587;
    }
    else {
      result_1124073532.precision = -1;
    }
    
      if (!(i_1124073534 < (s_1124073529).length)) Temporary2 = false; else {        Temporary2 = (ConstSet8[s_1124073529[i_1124073534]] != undefined);      }    if (Temporary2) {
    result_1124073532.typ = s_1124073529[i_1124073534];
    i_1124073534 += 1;
    }
    
    result_1124073532.endPosition = i_1124073534;
    if ((!((i_1124073534 == (s_1124073529).length)) && !(ignoreUnknownSuffix_1124073531))) {
    raiseException({message: ([105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,116,114,105,110,103,44,32,99,97,110,110,111,116,32,112,97,114,115,101,58,32] || []).concat(HEX5BHEX5D_889193745(s_1124073529, HEX2EHEX2E_939524192(i_1124073534, 1)) || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_1124073532;

}

function nsuformatBiggestFloat(f_889194478, format_889194479, precision_889194480, decimalSep_889194481) {
  var result_889194482 = [];

    var precision_889194483 = precision_889194480;
    if ((precision_889194483 == -1)) {
    precision_889194483 = 6;
    }
    
    var res_889194484 = null;
    switch (format_889194479) {
    case 0:
      res_889194484 = f_889194478.toString();
      break;
    case 1:
      res_889194484 = f_889194478.toFixed(precision_889194483);
      break;
    case 2:
      res_889194484 = f_889194478.toExponential(precision_889194483);
      break;
    }
    result_889194482 = nimCopy(null, cstrToNimstr(res_889194484), NTI33554449);
    if (((1.0 / f_889194478) == -Infinity)) {
    result_889194482 = nimCopy(null, ([45] || []).concat(cstrToNimstr(res_889194484) || []), NTI33554449);
    }
    
    Label1: {
      var i_889194489 = 0;
      var colontmp__536871304 = 0;
      colontmp__536871304 = (result_889194482).length;
      var i_536871305 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_536871305 < colontmp__536871304)) break Label3;
            i_889194489 = i_536871305;
            if ((ConstSet9[result_889194482[i_889194489]] != undefined)) {
            result_889194482[i_889194489] = decimalSep_889194481;
            }
            
            i_536871305 += 1;
          }
      };
    };

  return result_889194482;

}

function insert_33557745(x_33557746, x_33557746_Idx, item_33557747, i_33557748) {
    var Temporary1;

    var xl_33557749 = (x_33557746[x_33557746_Idx]).length;
    if (x_33557746[x_33557746_Idx].length < (Temporary1 = (xl_33557749 + (item_33557747).length), Temporary1)) { for (var i = x_33557746[x_33557746_Idx].length; i < Temporary1; ++i) x_33557746[x_33557746_Idx].push(0); }
         else {x_33557746[x_33557746_Idx].length = Temporary1; };
    var j_33557750 = (xl_33557749 - 1);
    Label2: {
        Label3: while (true) {
        if (!(i_33557748 <= j_33557750)) break Label3;
          x_33557746[x_33557746_Idx][(j_33557750 + (item_33557747).length)] = x_33557746[x_33557746_Idx][j_33557750];
          j_33557750 -= 1;
        }
    };
    j_33557750 = 0;
    Label4: {
        Label5: while (true) {
        if (!(j_33557750 < (item_33557747).length)) break Label5;
          x_33557746[x_33557746_Idx][(j_33557750 + i_33557748)] = item_33557747[j_33557750];
          j_33557750 += 1;
        }
    };

  
}

function nsuRepeatChar(c_889193559, count_889193560) {
  var result_889193561 = [];

    result_889193561 = nimCopy(null, mnewString(count_889193560), NTI33554449);
    Label1: {
      var i_889193566 = 0;
      var colontmp__536871310 = 0;
      colontmp__536871310 = (count_889193560 - 1);
      var res_536871311 = 0;
      Label2: {
          Label3: while (true) {
          if (!(res_536871311 <= colontmp__536871310)) break Label3;
            i_889193566 = res_536871311;
            result_889193561[i_889193566] = c_889193559;
            res_536871311 += 1;
          }
      };
    };

  return result_889193561;

}

function validateUtf8_989856067(s_989856068) {
  var result_989856069 = 0;

  BeforeRet: {
    var i_989856070 = 0;
    var L_989856074 = (s_989856068).length;
    Label1: {
        Label2: while (true) {
        if (!(i_989856070 < L_989856074)) break Label2;
          if ((s_989856068[i_989856070] <= 127)) {
          i_989856070 += 1;
          }
          else {
          if (((s_989856068[i_989856070] >>> 5) == 6)) {
          if ((s_989856068[i_989856070] < 194)) {
          result_989856069 = i_989856070;
          break BeforeRet;
          }
          
          if ((((i_989856070 + 1) < L_989856074) && ((s_989856068[(i_989856070 + 1)] >>> 6) == 2))) {
          i_989856070 += 2;
          }
          else {
            result_989856069 = i_989856070;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_989856068[i_989856070] >>> 4) == 14)) {
          if (((((i_989856070 + 2) < L_989856074) && ((s_989856068[(i_989856070 + 1)] >>> 6) == 2)) && ((s_989856068[(i_989856070 + 2)] >>> 6) == 2))) {
          i_989856070 += 3;
          }
          else {
            result_989856069 = i_989856070;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_989856068[i_989856070] >>> 3) == 30)) {
          if ((((((i_989856070 + 3) < L_989856074) && ((s_989856068[(i_989856070 + 1)] >>> 6) == 2)) && ((s_989856068[(i_989856070 + 2)] >>> 6) == 2)) && ((s_989856068[(i_989856070 + 3)] >>> 6) == 2))) {
          i_989856070 += 4;
          }
          else {
            result_989856069 = i_989856070;
            break BeforeRet;
          }
          
          }
          else {
            result_989856069 = i_989856070;
            break BeforeRet;
          }
          }}}
        }
    };
    result_989856069 = -1;
    break BeforeRet;
  };

  return result_989856069;

}

function validateUtf8_989862934(s_989862935) {
  var result_989862936 = 0;

    result_989862936 = validateUtf8_989856067((s_989862935.slice(0, (s_989862935).length - 1 + 1)));

  return result_989862936;

}

function nucruneLen(s_989855772) {
  var result_989855773 = 0;

    result_989855773 = 0;
    var i_989855774 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_989855774 < (s_989855772).length)) break Label2;
          if ((s_989855772[i_989855774] <= 127)) {
          i_989855774 += 1;
          }
          else {
          if (((s_989855772[i_989855774] >>> 5) == 6)) {
          i_989855774 += 2;
          }
          else {
          if (((s_989855772[i_989855774] >>> 4) == 14)) {
          i_989855774 += 3;
          }
          else {
          if (((s_989855772[i_989855774] >>> 3) == 30)) {
          i_989855774 += 4;
          }
          else {
          if (((s_989855772[i_989855774] >>> 2) == 62)) {
          i_989855774 += 5;
          }
          else {
          if (((s_989855772[i_989855774] >>> 1) == 126)) {
          i_989855774 += 6;
          }
          else {
          i_989855774 += 1;
          }
          }}}}}
          result_989855773 += 1;
        }
    };

  return result_989855773;

}

function runeLen_989862762(s_989862763) {
  var result_989862764 = 0;

    result_989862764 = nucruneLen((s_989862763.slice(0, (s_989862763).length - 1 + 1)));

  return result_989862764;

}

function alignString_1124073490(s_1124073491, minimumWidth_1124073492, align_1124073493, fill_1124073494) {
      var Temporary1;

  var result_1124073495 = [];

    if ((minimumWidth_1124073492 == 0)) {
    result_1124073495 = nimCopy(null, s_1124073491, NTI33554449);
    }
    else {
      if ((validateUtf8_989862934(s_1124073491) == -1)) {
      Temporary1 = runeLen_989862762(s_1124073491);
      }
      else {
      Temporary1 = (s_1124073491).length;
      }
      
      var sRuneLen_1124073496 = Temporary1;
      var toFill_1124073497 = (minimumWidth_1124073492 - sRuneLen_1124073496);
      if ((toFill_1124073497 <= 0)) {
      result_1124073495 = nimCopy(null, s_1124073491, NTI33554449);
      }
      else {
      if (((align_1124073493 == 60) || (align_1124073493 == 0))) {
      result_1124073495 = nimCopy(null, (s_1124073491 || []).concat(nsuRepeatChar(fill_1124073494, toFill_1124073497) || []), NTI33554449);
      }
      else {
      if ((align_1124073493 == 94)) {
      var half_1124073498 = Math.trunc(toFill_1124073497 / 2);
      result_1124073495 = nimCopy(null, (nsuRepeatChar(fill_1124073494, half_1124073498) || []).concat(s_1124073491 || [],nsuRepeatChar(fill_1124073494, (toFill_1124073497 - half_1124073498)) || []), NTI33554449);
      }
      else {
        result_1124073495 = nimCopy(null, (nsuRepeatChar(fill_1124073494, toFill_1124073497) || []).concat(s_1124073491 || []), NTI33554449);
      }
      }}
    }
    

  return result_1124073495;

}

function nsuToUpperAsciiChar(c_889192551) {
  var result_889192552 = 0;

    if ((ConstSet11[c_889192551] != undefined)) {
    result_889192552 = (c_889192551 ^ 32);
    }
    else {
      result_889192552 = c_889192551;
    }
    

  return result_889192552;

}

function nsuToUpperAsciiStr(s_889192558) {
  var result_889192559 = [];

    result_889192559 = nimCopy(null, mnewString((s_889192558).length), NTI33554449);
    Label1: {
      var iHEX60gensym11_889192565 = 0;
      var colontmp__536871316 = 0;
      colontmp__536871316 = ((s_889192558).length - 1);
      var res_536871317 = 0;
      Label2: {
          Label3: while (true) {
          if (!(res_536871317 <= colontmp__536871316)) break Label3;
            iHEX60gensym11_889192565 = res_536871317;
            result_889192559[iHEX60gensym11_889192565] = nsuToUpperAsciiChar(s_889192558[iHEX60gensym11_889192565]);
            res_536871317 += 1;
          }
      };
    };

  return result_889192559;

}

function formatValue_1107296493(result_1107296495, result_1107296495_Idx, value_1107296496, specifier_1107296497) {
    var Temporary1;

  BeforeRet: {
    if (((specifier_1107296497).length == 0)) {
    result_1107296495[result_1107296495_Idx].push.apply(result_1107296495[result_1107296495_Idx], HEX24_33557336(value_1107296496));;
    break BeforeRet;
    }
    
    var spec_1107296501 = parseStandardFormatSpecifier_1124073528(specifier_1107296497, 0, false);
    var fmode_1107296502 = 0;
    switch (spec_1107296501.typ) {
    case 101:
    case 69:
      fmode_1107296502 = 2;
      break;
    case 102:
    case 70:
      fmode_1107296502 = 1;
      break;
    case 103:
    case 71:
      fmode_1107296502 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_1107296501.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_1107296504 = [nsuformatBiggestFloat(value_1107296496, fmode_1107296502, spec_1107296501.precision, 46)];
    var sign_1107296505 = false;
    if ((0.0 <= value_1107296496)) {
    if (!((spec_1107296501.sign == 45))) {
    sign_1107296505 = true;
    if ((value_1107296496 == 0.0)) {
    if (((1.0 / value_1107296496) == Infinity)) {
    insert_33557745(f_1107296504, 0, nimCharToStr(spec_1107296501.sign), 0);
    }
    
    }
    else {
    insert_33557745(f_1107296504, 0, nimCharToStr(spec_1107296501.sign), 0);
    }
    
    }
    
    }
    else {
      sign_1107296505 = true;
    }
    
    if (spec_1107296501.padWithZero) {
    var signStr_1107296506 = [];
    if (sign_1107296505) {
    signStr_1107296506 = nimCopy(null, nimCharToStr(f_1107296504[0][0]), NTI33554449);
    f_1107296504[0] = nimCopy(null, HEX5BHEX5D_889193745(f_1107296504[0], HEX2EHEX2E_939524192(1, 1)), NTI33554449);
    }
    
    var toFill_1107296528 = ((spec_1107296501.minimumWidth - (f_1107296504[0]).length) - (sign_1107296505 ? 1 : 0));
    if ((0 < toFill_1107296528)) {
    f_1107296504[0] = nimCopy(null, (nsuRepeatChar(48, toFill_1107296528) || []).concat(f_1107296504[0] || []), NTI33554449);
    }
    
    if (sign_1107296505) {
    f_1107296504[0] = nimCopy(null, (signStr_1107296506 || []).concat(f_1107296504[0] || []), NTI33554449);
    }
    
    }
    
    if ((spec_1107296501.align == 0)) {
    Temporary1 = 62;
    }
    else {
    Temporary1 = spec_1107296501.align;
    }
    
    var align_1107296529 = Temporary1;
    var res_1107296530 = alignString_1124073490(f_1107296504[0], spec_1107296501.minimumWidth, align_1107296529, spec_1107296501.fill);
    if ((ConstSet10[spec_1107296501.typ] != undefined)) {
    result_1107296495[result_1107296495_Idx].push.apply(result_1107296495[result_1107296495_Idx], nsuToUpperAsciiStr(res_1107296530));;
    }
    else {
    result_1107296495[result_1107296495_Idx].push.apply(result_1107296495[result_1107296495_Idx], res_1107296530);;
    }
    
  };

  
}

function background_1375732021(r_1375732022, g_1375732023, b_1375732024, a_1375732025) {
    context_1375731718[0].clearRect(0, 0, canvas_1375731717[0].width, canvas_1375731717[0].height);
    var fmtRes_1375732036 = [mnewString(0)];
    fmtRes_1375732036[0].push.apply(fmtRes_1375732036[0], [114,103,98,97,40]);;
    formatValue_1107296493(fmtRes_1375732036, 0, (r_1375732022 * 255.0), []);
    fmtRes_1375732036[0].push.apply(fmtRes_1375732036[0], [44,32]);;
    formatValue_1107296493(fmtRes_1375732036, 0, (g_1375732023 * 255.0), []);
    fmtRes_1375732036[0].push.apply(fmtRes_1375732036[0], [44,32]);;
    formatValue_1107296493(fmtRes_1375732036, 0, (b_1375732024 * 255.0), []);
    fmtRes_1375732036[0].push.apply(fmtRes_1375732036[0], [44,32]);;
    formatValue_1107296493(fmtRes_1375732036, 0, (a_1375732025 * 255.0), []);
    fmtRes_1375732036[0].push.apply(fmtRes_1375732036[0], [41]);;
    context_1375731718[0].fillStyle = toJSStr(fmtRes_1375732036[0]);
    context_1375731718[0].fillRect(0, 0, canvas_1375731717[0].width, canvas_1375731717[0].height);

  
}

function addChars_301990066(result_301990068, result_301990068_Idx, x_301990069, start_301990070, n_301990071) {
    var Temporary1;

    var old_301990072 = (result_301990068[result_301990068_Idx]).length;
    if (result_301990068[result_301990068_Idx].length < (Temporary1 = (old_301990072 + n_301990071), Temporary1)) { for (var i = result_301990068[result_301990068_Idx].length; i < Temporary1; ++i) result_301990068[result_301990068_Idx].push(0); }
         else {result_301990068[result_301990068_Idx].length = Temporary1; };
    Label2: {
      var iHEX60gensym4_301990086 = 0;
      var i_536871323 = 0;
      Label3: {
          Label4: while (true) {
          if (!(i_536871323 < n_301990071)) break Label4;
            iHEX60gensym4_301990086 = i_536871323;
            result_301990068[result_301990068_Idx][(old_301990072 + iHEX60gensym4_301990086)] = x_301990069.charCodeAt((start_301990070 + iHEX60gensym4_301990086));
            i_536871323 += 1;
          }
      };
    };

  
}

function addChars_301990062(result_301990064, result_301990064_Idx, x_301990065) {
    addChars_301990066(result_301990064, result_301990064_Idx, x_301990065, 0, ((x_301990065) == null ? 0 : (x_301990065).length));

  
}

function addInt_301990087(result_301990088, result_301990088_Idx, x_301990089) {
    addChars_301990062(result_301990088, result_301990088_Idx, ((x_301990089) + ""));

  
}

function addInt_301990108(result_301990109, result_301990109_Idx, x_301990110) {
    addInt_301990087(result_301990109, result_301990109_Idx, x_301990110);

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

    addInt_301990108(result_369098762, 0, x_369098761);

  return result_369098762[0];

}

function reprEnum(e_33557353, typ_33557354) {
  var result_33557355 = [];

    var tmp_33557356 = false;
    var item_33557357 = typ_33557354.node.sons[e_33557353];
    tmp_33557356 = item_33557357 !== undefined
    if (tmp_33557356) {
    result_33557355 = nimCopy(null, makeNimstrLit(item_33557357.name), NTI33554449);
    }
    else {
      result_33557355 = nimCopy(null, (HEX24_369098760(e_33557353) || []).concat([32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41] || []), NTI33554449);
    }
    

  return result_33557355;

}

function abs_704643243(x_704643245) {
  var result_704643246 = 0.0;

    result_704643246 = Math.abs(x_704643245);

  return result_704643246;

}

function hsvToRgb_1358954573(color_1358954574) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
    var Temporary4;
    var Temporary5;
    var Temporary6;

  var result_1358954575 = ({mode: 0, r: 0.0, g: 0.0, b: 0.0, h: 0, s: 0.0, v: 0.0, a: 0.0});

  BeforeRet: {
    if (!((color_1358954574.mode == 1))) {
    result_1358954575 = nimCopy(result_1358954575, color_1358954574, NTI1358954500);
    break BeforeRet;
    }
    
    var Temporary1 = color_1358954574;
    if (ConstSet15[Temporary1.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'s\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary1.mode, NTI1358954499)); }
    var Temporary2 = color_1358954574;
    if (ConstSet16[Temporary2.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'v\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary2.mode, NTI1358954499)); }
    var c_1358954581 = (Temporary1.s * Temporary2.v);
    var Temporary3 = color_1358954574;
    if (ConstSet17[Temporary3.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'h\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary3.mode, NTI1358954499)); }
    var x_1358954585 = (c_1358954581 * (1.0 - abs_704643243(((HEX2F_33556035(Temporary3.h, 60) % 2.0) - 1.0))));
    var Temporary4 = color_1358954574;
    if (ConstSet18[Temporary4.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'v\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary4.mode, NTI1358954499)); }
    var m_1358954586 = (Temporary4.v - c_1358954581);
    var Temporary5 = color_1358954574;
    if (ConstSet19[Temporary5.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'h\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary5.mode, NTI1358954499)); }
    if (    Math.trunc(Temporary5.h % 360) >= 0 && Math.trunc(Temporary5.h % 360) <= 59    ){      Temporary6 = {Field0: c_1358954581, Field1: x_1358954585, Field2: 0.0};
      }
    else if (    Math.trunc(Temporary5.h % 360) >= 60 && Math.trunc(Temporary5.h % 360) <= 119    ){      Temporary6 = {Field0: x_1358954585, Field1: c_1358954581, Field2: 0.0};
      }
    else if (    Math.trunc(Temporary5.h % 360) >= 120 && Math.trunc(Temporary5.h % 360) <= 179    ){      Temporary6 = {Field0: 0.0, Field1: c_1358954581, Field2: x_1358954585};
      }
    else if (    Math.trunc(Temporary5.h % 360) >= 180 && Math.trunc(Temporary5.h % 360) <= 239    ){      Temporary6 = {Field0: 0.0, Field1: x_1358954585, Field2: c_1358954581};
      }
    else if (    Math.trunc(Temporary5.h % 360) >= 240 && Math.trunc(Temporary5.h % 360) <= 299    ){      Temporary6 = {Field0: x_1358954585, Field1: 0.0, Field2: c_1358954581};
      }
    else if (    Math.trunc(Temporary5.h % 360) >= 300 && Math.trunc(Temporary5.h % 360) <= 359    ){      Temporary6 = {Field0: c_1358954581, Field1: 0.0, Field2: x_1358954585};
      }
    else{
      Temporary6 = {Field0: 0.0, Field1: 0.0, Field2: 0.0};
      }
    var colontmp__536871325 = nimCopy(null, Temporary6, NTI1358954542);
    var r_1358954587 = colontmp__536871325["Field0"];
    var g_1358954588 = colontmp__536871325["Field1"];
    var b_1358954589 = colontmp__536871325["Field2"];
    result_1358954575 = nimCopy(result_1358954575, newColorRGB_1358954555((r_1358954587 + m_1358954586), (g_1358954588 + m_1358954586), (b_1358954589 + m_1358954586), color_1358954574.a), NTI1358954500);
  };

  return result_1358954575;

}

function setBackgroundColor_1358955390() {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    switch (backgroundColor_1358954569[0].mode) {
    case 0:
      var Temporary1 = backgroundColor_1358954569[0];
      if (ConstSet12[Temporary1.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'r\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary1.mode, NTI1358954499)); }
      var Temporary2 = backgroundColor_1358954569[0];
      if (ConstSet13[Temporary2.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'g\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary2.mode, NTI1358954499)); }
      var Temporary3 = backgroundColor_1358954569[0];
      if (ConstSet14[Temporary3.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary3.mode, NTI1358954499)); }
      background_1375732021(Temporary1.r, Temporary2.g, Temporary3.b, backgroundColor_1358954569[0].a);
      break;
    case 1:
      var rgb_1358955391 = hsvToRgb_1358954573(backgroundColor_1358954569[0]);
      var Temporary4 = rgb_1358955391;
      if (ConstSet20[Temporary4.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'r\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary4.mode, NTI1358954499)); }
      var Temporary5 = rgb_1358955391;
      if (ConstSet21[Temporary5.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'g\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary5.mode, NTI1358954499)); }
      var Temporary6 = rgb_1358955391;
      if (ConstSet22[Temporary6.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary6.mode, NTI1358954499)); }
      background_1375732021(Temporary4.r, Temporary5.g, Temporary6.b, rgb_1358955391.a);
      break;
    }

  
}

function background_1358955397(rh_1358955398, gs_1358955399, bv_1358955400) {
    switch (colorMode_1358954570[0]) {
    case 0:
      backgroundColor_1358954569[0] = nimCopy(backgroundColor_1358954569[0], newColorRGB_1358954561(rh_1358955398, gs_1358955399, bv_1358955400, 255), NTI1358954500);
      break;
    case 1:
      backgroundColor_1358954569[0] = nimCopy(backgroundColor_1358954569[0], newColorHSV_1358954549(rh_1358955398, gs_1358955399, bv_1358955400, 255), NTI1358954500);
      break;
    }
    setBackgroundColor_1358955390();

  
}

function background_536870997(gray_536870999) {
    background_1358955397(gray_536870999, gray_536870999, gray_536870999);

  
}

function next_1107296349() {
  var result_1107296350 = 0;

  BeforeRet: {
    result_1107296350 = Math.trunc((state_1107296297[0].currentPage + 1) % 2);
    break BeforeRet;
  };

  return result_1107296350;

}

function current_1107296347() {
  var result_1107296348 = 0;

  BeforeRet: {
    result_1107296348 = state_1107296297[0].currentPage;
    break BeforeRet;
  };

  return result_1107296348;

}

function roll_1107296579() {
    state_1107296297[0].currentPage = next_1107296349();
    state_1107296297[0].pages[next_1107296349()] = nimCopy(state_1107296297[0].pages[next_1107296349()], state_1107296297[0].pages[current_1107296347()], NTI1107296277);

  
}

function newColorHSV_1358954515(h_1358954516, s_1358954517, v_1358954518, a_1358954519) {
  var result_1358954520 = ({mode: 0, r: 0.0, g: 0.0, b: 0.0, h: 0, s: 0.0, v: 0.0, a: 0.0});

    result_1358954520 = nimCopy(result_1358954520, {mode: 1, h: h_1358954516, s: s_1358954517, v: v_1358954518, a: a_1358954519, r: 0.0, g: 0.0, b: 0.0}, NTI1358954500);

  return result_1358954520;

}

function stroke_1358954997(h_1358954998, s_1358954999, b_1358955000) {
    switch (colorMode_1358954570[0]) {
    case 0:
      raiseException({message: [114,44,32,103,44,32,98,32,115,104,111,117,108,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,116,121,112,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    case 1:
      strokeColor_1358954568[0] = nimCopy(strokeColor_1358954568[0], newColorHSV_1358954515(h_1358954998, s_1358954999, b_1358955000, 1.0), NTI1358954500);
      break;
    }

  
}

function field_1107296331(index_1107296332, field_1107296333) {
  var result_1107296334 = 0;

    result_1107296334 = ((index_1107296332 * 7) + field_1107296333);

  return result_1107296334;

}

function HEX24_1107296368(particle_1107296369, field_1107296370) {
    var Temporary1;

  var result_1107296371 = null;
  var result_1107296371_Idx = 0;

    result_1107296371 = (Temporary1 = state_1107296297[0].pages[current_1107296347()], Temporary1); result_1107296371_Idx = field_1107296331(particle_1107296369, field_1107296370);

  return [result_1107296371, result_1107296371_Idx];

}

function fill_1358954599(h_1358954600, s_1358954601, b_1358954602) {
    switch (colorMode_1358954570[0]) {
    case 0:
      raiseException({message: [114,44,32,103,44,32,98,32,115,104,111,117,108,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,116,121,112,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    case 1:
      fillColor_1358954567[0] = nimCopy(fillColor_1358954567[0], newColorHSV_1358954515(h_1358954600, s_1358954601, b_1358954602, 1.0), NTI1358954500);
      break;
    }

  
}

function changeColor_1375732067(r_1375732068, g_1375732069, b_1375732070, a_1375732071) {
    strokeColor_1375731720[0] = nimCopy(strokeColor_1375731720[0], new Uint8Array([(r_1375732068 * 255.0), (g_1375732069 * 255.0), (b_1375732070 * 255.0), (a_1375732071 * 255.0)]), NTI1375731718);
    fillColor_1375731721[0] = nimCopy(fillColor_1375731721[0], new Uint8Array([(r_1375732068 * 255.0), (g_1375732069 * 255.0), (b_1375732070 * 255.0), (a_1375732071 * 255.0)]), NTI1375731721);

  
}

function setFillColor_1358955388() {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    switch (fillColor_1358954567[0].mode) {
    case 0:
      var Temporary1 = fillColor_1358954567[0];
      if (ConstSet23[Temporary1.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'r\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary1.mode, NTI1358954499)); }
      var Temporary2 = fillColor_1358954567[0];
      if (ConstSet24[Temporary2.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'g\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary2.mode, NTI1358954499)); }
      var Temporary3 = fillColor_1358954567[0];
      if (ConstSet25[Temporary3.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary3.mode, NTI1358954499)); }
      changeColor_1375732067(Temporary1.r, Temporary2.g, Temporary3.b, fillColor_1358954567[0].a);
      break;
    case 1:
      var rgb_1358955389 = hsvToRgb_1358954573(fillColor_1358954567[0]);
      var Temporary4 = rgb_1358955389;
      if (ConstSet26[Temporary4.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'r\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary4.mode, NTI1358954499)); }
      var Temporary5 = rgb_1358955389;
      if (ConstSet27[Temporary5.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'g\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary5.mode, NTI1358954499)); }
      var Temporary6 = rgb_1358955389;
      if (ConstSet28[Temporary6.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary6.mode, NTI1358954499)); }
      changeColor_1375732067(Temporary4.r, Temporary5.g, Temporary6.b, rgb_1358955389.a);
      break;
    }

  
}

function newFilledShape_1342177338() {
  var result_1342177339 = ({vertices: [], drawKind: 0});

    result_1342177339 = nimCopy(result_1342177339, {drawKind: 1, vertices: []}, NTI1342177284);

  return result_1342177339;

}

function beginFilledShape_1342177352() {
    drawingStack_1342177326[0].push(newFilledShape_1342177338());;

  
}

function HEX2A_1325400110(x_1325400111, A_1325400112) {
  var result_1325400113 = {Field0: 0.0, Field1: 0.0};

    var colontmp__536871333 = (((x_1325400111["Field0"] * A_1325400112["Field0"]["Field0"]) + (x_1325400111["Field1"] * A_1325400112["Field0"]["Field1"])) + A_1325400112["Field0"]["Field2"]);
    var colontmp__536871334 = (((x_1325400111["Field0"] * A_1325400112["Field1"]["Field0"]) + (x_1325400111["Field1"] * A_1325400112["Field1"]["Field1"])) + A_1325400112["Field1"]["Field2"]);
    result_1325400113 = nimCopy(result_1325400113, {Field0: colontmp__536871333, Field1: colontmp__536871334}, NTI1325400068);

  return result_1325400113;

}

function HEX2DHEX3D_1325400209(x_1325400211, x_1325400211_Idx, y_1325400212) {
    x_1325400211[x_1325400211_Idx] = (x_1325400211[x_1325400211_Idx] - y_1325400212);

  
}

function round_1325400205(x_1325400207) {
  var result_1325400208 = [0.0];

    if ((0.0 <= x_1325400207)) {
    result_1325400208[0] = Math.round(x_1325400207);
    }
    else {
      result_1325400208[0] = Math.ceil(x_1325400207);
      if ((0.5 <= (result_1325400208[0] - x_1325400207))) {
      HEX2DHEX3D_1325400209(result_1325400208, 0, 1.0);
      }
      
    }
    

  return result_1325400208[0];

}

function getScreenPosition_1476395057(x_1476395060, y_1476395061) {
  var result_1476395062 = {Field0: 0, Field1: 0};

    var colontmp__536871332 = HEX2A_1325400110({Field0: x_1476395060, Field1: y_1476395061}, matrix_1325400068[0]);
    var x_res_1476395063 = colontmp__536871332["Field0"];
    var y_res_1476395064 = colontmp__536871332["Field1"];
    var colontmp__536871330 = ((round_1325400205(x_res_1476395063)) | 0);
    var colontmp__536871331 = ((round_1325400205(y_res_1476395064)) | 0);
    result_1476395062 = nimCopy(result_1476395062, {Field0: colontmp__536871330, Field1: colontmp__536871331}, NTI1325400202);

  return result_1476395062;

}

function HEX5BHEX5D_1342177359(s_1342177361, i_1342177362) {
  var result_1342177363 = null;

    result_1342177363 = s_1342177361[((s_1342177361).length - i_1342177362)];

  return result_1342177363;

}

function vertex_1476395052(x_1476395055, y_1476395056) {
    var colontmp__536871329 = getScreenPosition_1476395057(x_1476395055, y_1476395056);
    var realX_1476395071 = colontmp__536871329["Field0"];
    var realY_1476395072 = colontmp__536871329["Field1"];
    HEX5BHEX5D_1342177359(drawingStack_1342177326[0], 1).vertices.push({Field0: realX_1476395071, Field1: realY_1476395072});;

  
}

function addInt_301990056(result_301990057, result_301990057_Idx, x_301990058) {
    addChars_301990062(result_301990057, result_301990057_Idx, ((x_301990058) + ""));

  
}

function HEX24_369098766(x_369098767) {
  var result_369098768 = [[]];

    addInt_301990056(result_369098768, 0, x_369098767);

  return result_369098768[0];

}

function mkDigit_1124073477(v_1124073478, typ_1124073479) {
      var Temporary1;

  var result_1124073480 = [];

    if ((v_1124073478 < 10)) {
    result_1124073480 = nimCopy(null, nimCharToStr((48 + v_1124073478)), NTI33554449);
    }
    else {
      if ((typ_1124073479 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_1124073480 = nimCopy(null, nimCharToStr(((Temporary1 + v_1124073478) - 10)), NTI33554449);
    }
    

  return result_1124073480;

}

function formatInt_1375731822(n_1375731824, radix_1375731825, spec_1375731826) {
  var result_1375731827 = [];

    var v_1375731830 = n_1375731824;
    var negative_1375731831 = false;
    var xx_1375731832 = [];
    if (spec_1375731826.alternateForm) {
    switch (spec_1375731826.typ) {
    case 88:
      xx_1375731832 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 120:
      xx_1375731832 = nimCopy(null, [48,120], NTI33554449);
      break;
    case 98:
      xx_1375731832 = nimCopy(null, [48,98], NTI33554449);
      break;
    case 111:
      xx_1375731832 = nimCopy(null, [48,111], NTI33554449);
      break;
    default: 
      break;
    }
    }
    
    if ((v_1375731830 == 0)) {
    result_1375731827 = nimCopy(null, [48], NTI33554449);
    }
    else {
      result_1375731827 = nimCopy(null, [], NTI33554449);
      Label1: {
          Label2: while (true) {
          if (!(0 < v_1375731830)) break Label2;
            var d_1375731833 = (v_1375731830 % radix_1375731825);
            v_1375731830 = Math.trunc(((v_1375731830 / radix_1375731825) ));
            result_1375731827.push.apply(result_1375731827, mkDigit_1124073477(d_1375731833, spec_1375731826.typ));;
          }
      };
      Label3: {
        var idx_1375731838 = 0;
        var colontmp__536871342 = 0;
        colontmp__536871342 = Math.trunc((result_1375731827).length / 2);
        var i_536871343 = 0;
        Label4: {
            Label5: while (true) {
            if (!(i_536871343 < colontmp__536871342)) break Label5;
              idx_1375731838 = i_536871343;
              var Temporary6 = result_1375731827[idx_1375731838]; result_1375731827[idx_1375731838] = result_1375731827[(((result_1375731827).length - idx_1375731838) - 1)]; result_1375731827[(((result_1375731827).length - idx_1375731838) - 1)] = Temporary6;              i_536871343 += 1;
            }
        };
      };
    }
    
    if (spec_1375731826.padWithZero) {
    var sign_1375731843 = (negative_1375731831 || !((spec_1375731826.sign == 45)));
    var toFill_1375731847 = (((spec_1375731826.minimumWidth - (result_1375731827).length) - (xx_1375731832).length) - (sign_1375731843 ? 1 : 0));
    if ((0 < toFill_1375731847)) {
    result_1375731827 = nimCopy(null, (nsuRepeatChar(48, toFill_1375731847) || []).concat(result_1375731827 || []), NTI33554449);
    }
    
    }
    
    if (negative_1375731831) {
    result_1375731827 = nimCopy(null, ([45] || []).concat(xx_1375731832 || [],result_1375731827 || []), NTI33554449);
    }
    else {
    if (!((spec_1375731826.sign == 45))) {
    result_1375731827 = nimCopy(null, [spec_1375731826.sign].concat(xx_1375731832 || [],result_1375731827 || []), NTI33554449);
    }
    else {
      result_1375731827 = nimCopy(null, (xx_1375731832 || []).concat(result_1375731827 || []), NTI33554449);
    }
    }
    if ((spec_1375731826.align == 60)) {
    Label7: {
      var i_1375731852 = 0;
      var colontmp__536871346 = 0;
      colontmp__536871346 = (result_1375731827).length;
      var i_536871347 = colontmp__536871346;
      Label8: {
          Label9: while (true) {
          if (!(i_536871347 < spec_1375731826.minimumWidth)) break Label9;
            i_1375731852 = i_536871347;
            addChar(result_1375731827, spec_1375731826.fill);;
            i_536871347 += 1;
          }
      };
    };
    }
    else {
      var toFill_1375731853 = (spec_1375731826.minimumWidth - (result_1375731827).length);
      if ((spec_1375731826.align == 94)) {
      var half_1375731854 = Math.trunc(toFill_1375731853 / 2);
      result_1375731827 = nimCopy(null, (nsuRepeatChar(spec_1375731826.fill, half_1375731854) || []).concat(result_1375731827 || [],nsuRepeatChar(spec_1375731826.fill, (toFill_1375731853 - half_1375731854)) || []), NTI33554449);
      }
      else {
        if ((0 < toFill_1375731853)) {
        result_1375731827 = nimCopy(null, (nsuRepeatChar(spec_1375731826.fill, toFill_1375731853) || []).concat(result_1375731827 || []), NTI33554449);
        }
        
      }
      
    }
    

  return result_1375731827;

}

function formatValue_1375731814(result_1375731816, result_1375731816_Idx, value_1375731817, specifier_1375731818) {
  BeforeRet: {
    if (((specifier_1375731818).length == 0)) {
    result_1375731816[result_1375731816_Idx].push.apply(result_1375731816[result_1375731816_Idx], HEX24_369098766(value_1375731817));;
    break BeforeRet;
    }
    
    var spec_1375731819 = parseStandardFormatSpecifier_1124073528(specifier_1375731818, 0, false);
    var radix_1375731820 = 10;
    switch (spec_1375731819.typ) {
    case 120:
    case 88:
      radix_1375731820 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_1375731820 = 2;
      break;
    case 111:
      radix_1375731820 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_1375731819.typ]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_1375731816[result_1375731816_Idx].push.apply(result_1375731816[result_1375731816_Idx], formatInt_1375731822(value_1375731817, radix_1375731820, spec_1375731819));;
  };

  
}

function drawFilledPolygon_1375731811(vertices_1375731812) {
    var fmtRes_1375731813 = [mnewString(0)];
    fmtRes_1375731813[0].push.apply(fmtRes_1375731813[0], [114,103,98,97,40]);;
    formatValue_1375731814(fmtRes_1375731813, 0, fillColor_1375731721[0][0], []);
    fmtRes_1375731813[0].push.apply(fmtRes_1375731813[0], [44,32]);;
    formatValue_1375731814(fmtRes_1375731813, 0, fillColor_1375731721[0][1], []);
    fmtRes_1375731813[0].push.apply(fmtRes_1375731813[0], [44,32]);;
    formatValue_1375731814(fmtRes_1375731813, 0, fillColor_1375731721[0][2], []);
    fmtRes_1375731813[0].push.apply(fmtRes_1375731813[0], [44,32]);;
    formatValue_1107296493(fmtRes_1375731813, 0, HEX2F_33556035(((strokeColor_1375731720[0][3]) | 0), 255), []);
    fmtRes_1375731813[0].push.apply(fmtRes_1375731813[0], [41]);;
    context_1375731718[0].fillStyle = toJSStr(fmtRes_1375731813[0]);
    context_1375731718[0].beginPath();
    Label1: {
      var x_1375731890 = 0;
      var y_1375731891 = 0;
      var i_536871337 = 0;
      var L_536871338 = (vertices_1375731812).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871337 < L_536871338)) break Label3;
            x_1375731890 = vertices_1375731812[i_536871337]["Field0"];
            y_1375731891 = vertices_1375731812[i_536871337]["Field1"];
            context_1375731718[0].lineTo(x_1375731890, y_1375731891);
            i_536871337 += 1;
          }
      };
    };
    context_1375731718[0].closePath();
    context_1375731718[0].fill("nonzero");

  
}

function setStrokeColor_1358955386() {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;

    switch (strokeColor_1358954568[0].mode) {
    case 0:
      var Temporary1 = strokeColor_1358954568[0];
      if (ConstSet29[Temporary1.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'r\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary1.mode, NTI1358954499)); }
      var Temporary2 = strokeColor_1358954568[0];
      if (ConstSet30[Temporary2.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'g\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary2.mode, NTI1358954499)); }
      var Temporary3 = strokeColor_1358954568[0];
      if (ConstSet31[Temporary3.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary3.mode, NTI1358954499)); }
      changeColor_1375732067(Temporary1.r, Temporary2.g, Temporary3.b, strokeColor_1358954568[0].a);
      break;
    case 1:
      var rgb_1358955387 = hsvToRgb_1358954573(strokeColor_1358954568[0]);
      var Temporary4 = rgb_1358955387;
      if (ConstSet32[Temporary4.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'r\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary4.mode, NTI1358954499)); }
      var Temporary5 = rgb_1358955387;
      if (ConstSet33[Temporary5.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'g\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary5.mode, NTI1358954499)); }
      var Temporary6 = rgb_1358955387;
      if (ConstSet34[Temporary6.mode]===undefined) { raiseFieldError2(makeNimstrLit("field \'b\' is not accessible for type \'Color\' using \'mode = "), reprDiscriminant(Temporary6.mode, NTI1358954499)); }
      changeColor_1375732067(Temporary4.r, Temporary5.g, Temporary6.b, rgb_1358955387.a);
      break;
    }

  
}

function drawPolygon_1375731925(vertices_1375731926) {
    var fmtRes_1375731927 = [mnewString(0)];
    fmtRes_1375731927[0].push.apply(fmtRes_1375731927[0], [114,103,98,97,40]);;
    formatValue_1375731814(fmtRes_1375731927, 0, strokeColor_1375731720[0][0], []);
    fmtRes_1375731927[0].push.apply(fmtRes_1375731927[0], [44,32]);;
    formatValue_1375731814(fmtRes_1375731927, 0, strokeColor_1375731720[0][1], []);
    fmtRes_1375731927[0].push.apply(fmtRes_1375731927[0], [44,32]);;
    formatValue_1375731814(fmtRes_1375731927, 0, strokeColor_1375731720[0][2], []);
    fmtRes_1375731927[0].push.apply(fmtRes_1375731927[0], [44,32]);;
    formatValue_1107296493(fmtRes_1375731927, 0, HEX2F_33556035(((strokeColor_1375731720[0][3]) | 0), 255), []);
    fmtRes_1375731927[0].push.apply(fmtRes_1375731927[0], [41]);;
    context_1375731718[0].strokeStyle = toJSStr(fmtRes_1375731927[0]);
    context_1375731718[0].beginPath();
    Label1: {
      var x_1375731951 = 0;
      var y_1375731952 = 0;
      var i_536871350 = 0;
      var L_536871351 = (vertices_1375731926).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871350 < L_536871351)) break Label3;
            x_1375731951 = vertices_1375731926[i_536871350]["Field0"];
            y_1375731952 = vertices_1375731926[i_536871350]["Field1"];
            context_1375731718[0].lineTo(x_1375731951, y_1375731952);
            i_536871350 += 1;
          }
      };
    };
    context_1375731718[0].closePath();
    context_1375731718[0].stroke();

  
}

function endFilledShape_1342177395() {
    var Temporary1;

    var vertices_1342177400 = nimCopy(null, HEX5BHEX5D_1342177359(drawingStack_1342177326[0], 1).vertices, NTI1342177286);
    if (drawingStack_1342177326[0].length < (Temporary1 = ((drawingStack_1342177326[0]).length - 1), Temporary1)) { for (var i = drawingStack_1342177326[0].length ; i < Temporary1 ; ++i) drawingStack_1342177326[0].push(({vertices: [], drawKind: 0})); }
               else { drawingStack_1342177326[0].length = Temporary1; };
    setFillColor_1358955388();
    drawFilledPolygon_1375731811(vertices_1342177400);
    setStrokeColor_1358955386();
    drawPolygon_1375731925(vertices_1342177400);

  
}

function arcFill_536871189(cx_536871194, cy_536871195, rx_536871196, ry_536871197, beginAngle_536871198, endAngle_536871199, mode_536871200) {
    setFillColor_1358955388();
    var theta_536871202 = ((endAngle_536871199 - beginAngle_536871198) / 512.0);
    var c_536871206 = Math.cos(theta_536871202);
    var s_536871210 = Math.sin(theta_536871202);
    var x_536871214 = Math.cos(beginAngle_536871198);
    var y_536871218 = Math.sin(beginAngle_536871198);
    switch (mode_536871200) {
    case 0:
    case 2:
      beginFilledShape_1342177352();
      break;
    case 1:
      beginFilledShape_1342177352();
      vertex_1476395052(cx_536871194, cy_536871195);
      break;
    }
    Label1: {
      var i_536871228 = 0;
      var res_536871327 = 0;
      Label2: {
          Label3: while (true) {
          if (!(res_536871327 <= 512)) break Label3;
            i_536871228 = res_536871327;
            vertex_1476395052(((x_536871214 * rx_536871196) + cx_536871194), ((y_536871218 * ry_536871197) + cy_536871195));
            var t_536871234 = x_536871214;
            x_536871214 = ((c_536871206 * x_536871214) - (s_536871210 * y_536871218));
            y_536871218 = ((s_536871210 * t_536871234) + (c_536871206 * y_536871218));
            res_536871327 += 1;
          }
      };
    };
    endFilledShape_1342177395();

  
}

function ellipseFill_536871180(cx_536871185, cy_536871186, rx_536871187, ry_536871188) {
    arcFill_536871189(cx_536871185, cy_536871186, rx_536871187, ry_536871188, 0.0, 6.283185307179586, 2);

  
}

function circleFill_536871173(x_536871177, y_536871178, r_536871179) {
    ellipseFill_536871180(x_536871177, y_536871178, r_536871179, r_536871179);

  
}

function stroke_1358955008(rh_1358955009, gs_1358955010, bv_1358955011, a_1358955012) {
    switch (colorMode_1358954570[0]) {
    case 0:
      strokeColor_1358954568[0] = nimCopy(strokeColor_1358954568[0], newColorRGB_1358954561(rh_1358955009, gs_1358955010, bv_1358955011, a_1358955012), NTI1358954500);
      break;
    case 1:
      strokeColor_1358954568[0] = nimCopy(strokeColor_1358954568[0], newColorHSV_1358954549(rh_1358955009, gs_1358955010, bv_1358955011, a_1358955012), NTI1358954500);
      break;
    }

  
}

function fill_1358954615(h_1358954616, s_1358954617, b_1358954618, a_1358954619) {
    switch (colorMode_1358954570[0]) {
    case 0:
      raiseException({message: [114,44,32,103,44,32,98,32,115,104,111,117,108,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,116,121,112,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    case 1:
      fillColor_1358954567[0] = nimCopy(fillColor_1358954567[0], newColorHSV_1358954515(h_1358954616, s_1358954617, b_1358954618, a_1358954619), NTI1358954500);
      break;
    }

  
}

function min_33555613(x_33555614, y_33555615) {
    var Temporary1;

  var result_33555616 = 0.0;

    if (((x_33555614 <= y_33555615) || !((y_33555615 == y_33555615)))) {
    Temporary1 = x_33555614;
    }
    else {
    Temporary1 = y_33555615;
    }
    
    result_33555616 = Temporary1;

  return result_33555616;

}

function rectFill_1459617861(x_1459617866, y_1459617867, w_1459617868, h_1459617869) {
    beginFilledShape_1342177352();
    vertex_1476395052(x_1459617866, y_1459617867);
    vertex_1476395052(x_1459617866, (y_1459617867 + h_1459617869));
    vertex_1476395052((x_1459617866 + w_1459617868), (y_1459617867 + h_1459617869));
    vertex_1476395052((x_1459617866 + w_1459617868), y_1459617867);
    endFilledShape_1342177395();

  
}

function HEX2BHEX3D_889194668(x_889194670, x_889194670_Idx, y_889194671) {
    x_889194670[x_889194670_Idx] = (x_889194670[x_889194670_Idx] + y_889194671);

  
}

function HEX3DHEX3D_1476395033(x_1476395035, y_1476395036) {
  var result_1476395037 = false;

  BeforeRet: {
    if (!((x_1476395035["Field0"] == y_1476395036["Field0"]))) {
    result_1476395037 = false;
    break BeforeRet;
    }
    
    if (!((x_1476395035["Field1"] == y_1476395036["Field1"]))) {
    result_1476395037 = false;
    break BeforeRet;
    }
    
    result_1476395037 = true;
    break BeforeRet;
  };

  return result_1476395037;

}

function newPath_1342177340() {
  var result_1342177341 = ({vertices: [], drawKind: 0});

    result_1342177341 = nimCopy(result_1342177341, {drawKind: 2, vertices: []}, NTI1342177284);

  return result_1342177341;

}

function beginPath_1342177342() {
    drawingStack_1342177326[0].push(newPath_1342177340());;

  
}

function drawPath_1375731959(vertices_1375731960) {
    var fmtRes_1375731965 = [mnewString(0)];
    fmtRes_1375731965[0].push.apply(fmtRes_1375731965[0], [114,103,98,97,40]);;
    formatValue_1375731814(fmtRes_1375731965, 0, strokeColor_1375731720[0][0], []);
    fmtRes_1375731965[0].push.apply(fmtRes_1375731965[0], [44,32]);;
    formatValue_1375731814(fmtRes_1375731965, 0, strokeColor_1375731720[0][1], []);
    fmtRes_1375731965[0].push.apply(fmtRes_1375731965[0], [44,32]);;
    formatValue_1375731814(fmtRes_1375731965, 0, strokeColor_1375731720[0][2], []);
    fmtRes_1375731965[0].push.apply(fmtRes_1375731965[0], [44,32]);;
    formatValue_1107296493(fmtRes_1375731965, 0, HEX2F_33556035(((strokeColor_1375731720[0][3]) | 0), 255), []);
    fmtRes_1375731965[0].push.apply(fmtRes_1375731965[0], [41]);;
    context_1375731718[0].strokeStyle = toJSStr(fmtRes_1375731965[0]);
    context_1375731718[0].beginPath();
    Label1: {
      var x_1375731989 = 0;
      var y_1375731990 = 0;
      var i_536871367 = 0;
      var L_536871368 = (vertices_1375731960).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871367 < L_536871368)) break Label3;
            x_1375731989 = vertices_1375731960[i_536871367]["Field0"];
            y_1375731990 = vertices_1375731960[i_536871367]["Field1"];
            context_1375731718[0].lineTo(x_1375731989, y_1375731990);
            i_536871367 += 1;
          }
      };
    };
    context_1375731718[0].stroke();

  
}

function endPath_1342177408() {
    var Temporary1;

    var vertices_1342177413 = nimCopy(null, HEX5BHEX5D_1342177359(drawingStack_1342177326[0], 1).vertices, NTI1342177286);
    if (drawingStack_1342177326[0].length < (Temporary1 = ((drawingStack_1342177326[0]).length - 1), Temporary1)) { for (var i = drawingStack_1342177326[0].length ; i < Temporary1 ; ++i) drawingStack_1342177326[0].push(({vertices: [], drawKind: 0})); }
               else { drawingStack_1342177326[0].length = Temporary1; };
    setStrokeColor_1358955386();
    drawPath_1375731959(vertices_1342177413);

  
}

function line_1476395043(x1_1476395048, y1_1476395049, x2_1476395050, y2_1476395051) {
    beginPath_1342177342();
    vertex_1476395052(x1_1476395048, y1_1476395049);
    vertex_1476395052(x2_1476395050, y2_1476395051);
    endPath_1342177408();

  
}

function drawChar_1476395018(c_1476395019, baseX_1476395020, baseY_1476395021, size_1476395022) {
  var result_1476395023 = 0.0;

  BeforeRet: {
    var offset_1476395027 = ((c_1476395019 - 32) * 112);
    var vertices_1476395028 = font_1509949441[0][offset_1476395027];
    var width_1476395029 = (size_1476395022 * font_1509949441[0][(offset_1476395027 + 1)]);
    var prev_1476395030 = {Field0: font_1509949441[0][(offset_1476395027 + 2)], Field1: font_1509949441[0][(offset_1476395027 + 3)]};
    var i_1476395031 = 2;
    Label1: {
        Label2: while (true) {
        if (!(i_1476395031 < (vertices_1476395028 * 2))) break Label2;
          var curr_1476395032 = {Field0: font_1509949441[0][((offset_1476395027 + 2) + i_1476395031)], Field1: font_1509949441[0][((offset_1476395027 + 3) + i_1476395031)]};
          if (!(HEX3DHEX3D_1476395033(curr_1476395032, {Field0: -1, Field1: -1}))) {
          line_1476395043((baseX_1476395020 + (prev_1476395030["Field0"] * size_1476395022)), (baseY_1476395021 - (prev_1476395030["Field1"] * size_1476395022)), (baseX_1476395020 + (curr_1476395032["Field0"] * size_1476395022)), (baseY_1476395021 - (curr_1476395032["Field1"] * size_1476395022)));
          prev_1476395030 = nimCopy(prev_1476395030, curr_1476395032, NTI1476395018);
          i_1476395031 += 2;
          }
          else {
            var colontmp__536871364 = font_1509949441[0][(((offset_1476395027 + 2) + i_1476395031) + 2)];
            var colontmp__536871365 = font_1509949441[0][(((offset_1476395027 + 3) + i_1476395031) + 2)];
            prev_1476395030 = nimCopy(prev_1476395030, {Field0: colontmp__536871364, Field1: colontmp__536871365}, NTI1476395018);
            i_1476395031 += 4;
          }
          
        }
    };
    result_1476395023 = width_1476395029;
    break BeforeRet;
  };

  return result_1476395023;

}

function draw_1476395103(label_1476395104) {
    label_1476395104.stroke();
    var x_1476395105 = [label_1476395104.x];
    Label1: {
      var c_1476395106 = 0;
      var i_536871360 = 0;
      var L_536871361 = (label_1476395104.text).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871360 < L_536871361)) break Label3;
            c_1476395106 = label_1476395104.text[i_536871360];
            HEX2BHEX3D_889194668(x_1476395105, 0, drawChar_1476395018(c_1476395106, x_1476395105[0], label_1476395104.y, label_1476395104.size));
            i_536871360 += 1;
          }
      };
    };

  
}

function contains_1459617846(s_1459617850, value_1459617851) {
  var result_1459617852 = false;

    result_1459617852 = ((s_1459617850.a <= value_1459617851) && (value_1459617851 <= s_1459617850.b));

  return result_1459617852;

}

function HEX2EHEX2E_1459617816(a_1459617819, b_1459617820) {
  var result_1459617823 = ({a: 0, b: 0});

    result_1459617823 = nimCopy(result_1459617823, {a: a_1459617819, b: b_1459617820}, NTI1459617810);

  return result_1459617823;

}

function binarySearch_989856807(c_989856808, tab_989856809, len_989856810, stride_989856811) {
  var result_989856812 = 0;

  BeforeRet: {
    var n_989856813 = len_989856810;
    var t_989856814 = 0;
    Label1: {
        Label2: while (true) {
        if (!(1 < n_989856813)) break Label2;
          var m_989856815 = Math.trunc(n_989856813 / 2);
          var p_989856816 = (t_989856814 + (m_989856815 * stride_989856811));
          if ((((tab_989856809[p_989856816]) | 0) <= c_989856808)) {
          t_989856814 = p_989856816;
          n_989856813 = (n_989856813 - m_989856815);
          }
          else {
            n_989856813 = m_989856815;
          }
          
        }
    };
    if ((!((n_989856813 == 0)) && (((tab_989856809[t_989856814]) | 0) <= c_989856808))) {
    result_989856812 = t_989856814;
    break BeforeRet;
    }
    
    result_989856812 = -1;
    break BeforeRet;
  };

  return result_989856812;

}

function nuctoLower(c_989856818) {
  var result_989856819 = 0;

  BeforeRet: {
    var c_989856820 = c_989856818;
    var p_989856829 = binarySearch_989856807(c_989856820, toLowerRanges_989856717, 45, 3);
    if ((((0 <= p_989856829) && (((toLowerRanges_989856717[p_989856829]) | 0) <= c_989856820)) && (c_989856820 <= ((toLowerRanges_989856717[(p_989856829 + 1)]) | 0)))) {
    result_989856819 = ((c_989856820 + ((toLowerRanges_989856717[(p_989856829 + 2)]) | 0)) - 500);
    break BeforeRet;
    }
    
    p_989856829 = binarySearch_989856807(c_989856820, toLowerSinglets_989856718, 610, 2);
    if (((0 <= p_989856829) && (c_989856820 == ((toLowerSinglets_989856718[p_989856829]) | 0)))) {
    result_989856819 = ((c_989856820 + ((toLowerSinglets_989856718[(p_989856829 + 1)]) | 0)) - 500);
    break BeforeRet;
    }
    
    result_989856819 = c_989856820;
    break BeforeRet;
  };

  return result_989856819;

}

function HEX3CHEX3DHEX25_33555522(x_33555523, y_33555524) {
  var result_33555525 = false;

    result_33555525 = ((x_33555523 >>> 0) <= (y_33555524 >>> 0));

  return result_33555525;

}

function nuctoLowerStr(s_989857936) {
          var Temporary3;
          var Temporary4;
          var Temporary5;
          var Temporary6;
          var Temporary7;
          var Temporary8;

  var result_989857937 = [];

    result_989857937 = nimCopy(null, mnewString((s_989857936).length), NTI33554449);
    var iHEX60gensym252_989857944 = 0;
    var resultIndexHEX60gensym252_989857945 = 0;
    var runeHEX60gensym252_989857946 = 0;
    Label1: {
        Label2: while (true) {
        if (!(iHEX60gensym252_989857944 < (s_989857936).length)) break Label2;
          if ((s_989857936[iHEX60gensym252_989857944] <= 127)) {
          runeHEX60gensym252_989857946 = s_989857936[iHEX60gensym252_989857944];
          iHEX60gensym252_989857944 += 1;
          }
          else {
          if (((s_989857936[iHEX60gensym252_989857944] >>> 5) == 6)) {
          if ((iHEX60gensym252_989857944 <= ((s_989857936).length - 2))) {
          runeHEX60gensym252_989857946 = (((s_989857936[iHEX60gensym252_989857944] & 31) << 6) | (s_989857936[(iHEX60gensym252_989857944 + 1)] & 63));
          iHEX60gensym252_989857944 += 2;
          }
          else {
            runeHEX60gensym252_989857946 = 65533;
            iHEX60gensym252_989857944 += 1;
          }
          
          }
          else {
          if (((s_989857936[iHEX60gensym252_989857944] >>> 4) == 14)) {
          if ((iHEX60gensym252_989857944 <= ((s_989857936).length - 3))) {
          runeHEX60gensym252_989857946 = ((((s_989857936[iHEX60gensym252_989857944] & 15) << 12) | ((s_989857936[(iHEX60gensym252_989857944 + 1)] & 63) << 6)) | (s_989857936[(iHEX60gensym252_989857944 + 2)] & 63));
          iHEX60gensym252_989857944 += 3;
          }
          else {
            runeHEX60gensym252_989857946 = 65533;
            iHEX60gensym252_989857944 += 1;
          }
          
          }
          else {
          if (((s_989857936[iHEX60gensym252_989857944] >>> 3) == 30)) {
          if ((iHEX60gensym252_989857944 <= ((s_989857936).length - 4))) {
          runeHEX60gensym252_989857946 = (((((s_989857936[iHEX60gensym252_989857944] & 7) << 18) | ((s_989857936[(iHEX60gensym252_989857944 + 1)] & 63) << 12)) | ((s_989857936[(iHEX60gensym252_989857944 + 2)] & 63) << 6)) | (s_989857936[(iHEX60gensym252_989857944 + 3)] & 63));
          iHEX60gensym252_989857944 += 4;
          }
          else {
            runeHEX60gensym252_989857946 = 65533;
            iHEX60gensym252_989857944 += 1;
          }
          
          }
          else {
          if (((s_989857936[iHEX60gensym252_989857944] >>> 2) == 62)) {
          if ((iHEX60gensym252_989857944 <= ((s_989857936).length - 5))) {
          runeHEX60gensym252_989857946 = ((((((s_989857936[iHEX60gensym252_989857944] & 3) << 24) | ((s_989857936[(iHEX60gensym252_989857944 + 1)] & 63) << 18)) | ((s_989857936[(iHEX60gensym252_989857944 + 2)] & 63) << 12)) | ((s_989857936[(iHEX60gensym252_989857944 + 3)] & 63) << 6)) | (s_989857936[(iHEX60gensym252_989857944 + 4)] & 63));
          iHEX60gensym252_989857944 += 5;
          }
          else {
            runeHEX60gensym252_989857946 = 65533;
            iHEX60gensym252_989857944 += 1;
          }
          
          }
          else {
          if (((s_989857936[iHEX60gensym252_989857944] >>> 1) == 126)) {
          if ((iHEX60gensym252_989857944 <= ((s_989857936).length - 6))) {
          runeHEX60gensym252_989857946 = (((((((s_989857936[iHEX60gensym252_989857944] & 1) << 30) | ((s_989857936[(iHEX60gensym252_989857944 + 1)] & 63) << 24)) | ((s_989857936[(iHEX60gensym252_989857944 + 2)] & 63) << 18)) | ((s_989857936[(iHEX60gensym252_989857944 + 3)] & 63) << 12)) | ((s_989857936[(iHEX60gensym252_989857944 + 4)] & 63) << 6)) | (s_989857936[(iHEX60gensym252_989857944 + 5)] & 63));
          iHEX60gensym252_989857944 += 6;
          }
          else {
            runeHEX60gensym252_989857946 = 65533;
            iHEX60gensym252_989857944 += 1;
          }
          
          }
          else {
            runeHEX60gensym252_989857946 = s_989857936[iHEX60gensym252_989857944];
            iHEX60gensym252_989857944 += 1;
          }
          }}}}}
          runeHEX60gensym252_989857946 = nuctoLower(runeHEX60gensym252_989857946);
          var iHEX60gensym274_989858187 = runeHEX60gensym252_989857946;
          if (HEX3CHEX3DHEX25_33555522(iHEX60gensym274_989858187, 127)) {
          if (result_989857937.length < (Temporary3 = (resultIndexHEX60gensym252_989857945 + 1), Temporary3)) { for (var i = result_989857937.length; i < Temporary3; ++i) result_989857937.push(0); }
         else {result_989857937.length = Temporary3; };
          result_989857937[(resultIndexHEX60gensym252_989857945 + 0)] = iHEX60gensym274_989858187;
          resultIndexHEX60gensym252_989857945 += 1;
          }
          else {
          if (HEX3CHEX3DHEX25_33555522(iHEX60gensym274_989858187, 2047)) {
          if (result_989857937.length < (Temporary4 = (resultIndexHEX60gensym252_989857945 + 2), Temporary4)) { for (var i = result_989857937.length; i < Temporary4; ++i) result_989857937.push(0); }
         else {result_989857937.length = Temporary4; };
          result_989857937[(resultIndexHEX60gensym252_989857945 + 0)] = ((iHEX60gensym274_989858187 >> 6) | 192);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 1)] = ((iHEX60gensym274_989858187 & 63) | 128);
          resultIndexHEX60gensym252_989857945 += 2;
          }
          else {
          if (HEX3CHEX3DHEX25_33555522(iHEX60gensym274_989858187, 65535)) {
          if (result_989857937.length < (Temporary5 = (resultIndexHEX60gensym252_989857945 + 3), Temporary5)) { for (var i = result_989857937.length; i < Temporary5; ++i) result_989857937.push(0); }
         else {result_989857937.length = Temporary5; };
          result_989857937[(resultIndexHEX60gensym252_989857945 + 0)] = ((iHEX60gensym274_989858187 >> 12) | 224);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 1)] = (((iHEX60gensym274_989858187 >> 6) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 2)] = ((iHEX60gensym274_989858187 & 63) | 128);
          resultIndexHEX60gensym252_989857945 += 3;
          }
          else {
          if (HEX3CHEX3DHEX25_33555522(iHEX60gensym274_989858187, 2097151)) {
          if (result_989857937.length < (Temporary6 = (resultIndexHEX60gensym252_989857945 + 4), Temporary6)) { for (var i = result_989857937.length; i < Temporary6; ++i) result_989857937.push(0); }
         else {result_989857937.length = Temporary6; };
          result_989857937[(resultIndexHEX60gensym252_989857945 + 0)] = ((iHEX60gensym274_989858187 >> 18) | 240);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 1)] = (((iHEX60gensym274_989858187 >> 12) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 2)] = (((iHEX60gensym274_989858187 >> 6) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 3)] = ((iHEX60gensym274_989858187 & 63) | 128);
          resultIndexHEX60gensym252_989857945 += 4;
          }
          else {
          if (HEX3CHEX3DHEX25_33555522(iHEX60gensym274_989858187, 67108863)) {
          if (result_989857937.length < (Temporary7 = (resultIndexHEX60gensym252_989857945 + 5), Temporary7)) { for (var i = result_989857937.length; i < Temporary7; ++i) result_989857937.push(0); }
         else {result_989857937.length = Temporary7; };
          result_989857937[(resultIndexHEX60gensym252_989857945 + 0)] = ((iHEX60gensym274_989858187 >> 24) | 248);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 1)] = (((iHEX60gensym274_989858187 >> 18) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 2)] = (((iHEX60gensym274_989858187 >> 12) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 3)] = (((iHEX60gensym274_989858187 >> 6) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 4)] = ((iHEX60gensym274_989858187 & 63) | 128);
          resultIndexHEX60gensym252_989857945 += 5;
          }
          else {
          if (HEX3CHEX3DHEX25_33555522(iHEX60gensym274_989858187, 2147483647)) {
          if (result_989857937.length < (Temporary8 = (resultIndexHEX60gensym252_989857945 + 6), Temporary8)) { for (var i = result_989857937.length; i < Temporary8; ++i) result_989857937.push(0); }
         else {result_989857937.length = Temporary8; };
          result_989857937[(resultIndexHEX60gensym252_989857945 + 0)] = ((iHEX60gensym274_989858187 >> 30) | 252);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 1)] = (((iHEX60gensym274_989858187 >> 24) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 2)] = (((iHEX60gensym274_989858187 >> 18) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 3)] = (((iHEX60gensym274_989858187 >> 12) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 4)] = (((iHEX60gensym274_989858187 >> 6) & 63) | 128);
          result_989857937[(resultIndexHEX60gensym252_989857945 + 5)] = ((iHEX60gensym274_989858187 & 63) | 128);
          resultIndexHEX60gensym252_989857945 += 6;
          }
          else {
          }
          }}}}}
        }
    };

  return result_989857937;

}

function toLower_989863149(s_989863150) {
  var result_989863151 = [];

    result_989863151 = nimCopy(null, nuctoLowerStr((s_989863150.slice(0, (s_989863150).length - 1 + 1))), NTI33554449);

  return result_989863151;

}

function displayName_1459617812(name_1459617813) {
  var result_1459617814 = [];

    result_1459617814 = nimCopy(null, [], NTI33554449);
    Label1: {
      var c_1459617815 = 0;
      var i_536871371 = 0;
      var L_536871372 = (name_1459617813).length;
      Label2: {
          Label3: while (true) {
          if (!(i_536871371 < L_536871372)) break Label3;
            c_1459617815 = name_1459617813[i_536871371];
            if (contains_1459617846(HEX2EHEX2E_1459617816(65, 90), c_1459617815)) {
            result_1459617814.push.apply(result_1459617814, toLower_989863149(([32] || []).concat([c_1459617815])));;
            }
            else {
            addChar(result_1459617814, c_1459617815);;
            }
            
            i_536871371 += 1;
          }
      };
    };

  return result_1459617814;

}

function stroke_1358955013(h_1358955014, s_1358955015, b_1358955016, a_1358955017) {
    switch (colorMode_1358954570[0]) {
    case 0:
      raiseException({message: [114,44,32,103,44,32,98,32,115,104,111,117,108,100,32,104,97,118,101,32,116,104,101,32,115,97,109,101,32,116,121,112,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    case 1:
      strokeColor_1358954568[0] = nimCopy(strokeColor_1358954568[0], newColorHSV_1358954515(h_1358955014, s_1358955015, b_1358955016, a_1358955017), NTI1358954500);
      break;
    }

  
}

function stroke_1459617910(gray_1459617912) {
    strokeColor_1358954568[0] = nimCopy(strokeColor_1358954568[0], newColorRGB_1358954555(gray_1459617912, gray_1459617912, gray_1459617912, 255.0), NTI1358954500);

  
}

function isMousePressed_1375732192(btn_1375732193) {
  var result_1375732194 = false;

    result_1375732194 = mouseButtons_1375731725[0][btn_1375732193];

  return result_1375732194;

}

function getMouseButtonCode_1442840722(btn_1442840723) {
  var result_1442840724 = 0;

    switch (btn_1442840723) {
    case 0:
      result_1442840724 = 0;
      break;
    case 1:
      result_1442840724 = 1;
      break;
    case 2:
      result_1442840724 = 2;
      break;
    case 3:
      result_1442840724 = 3;
      break;
    case 4:
      result_1442840724 = 4;
      break;
    case 5:
      result_1442840724 = 5;
      break;
    case 6:
      result_1442840724 = 6;
      break;
    case 7:
      result_1442840724 = 7;
      break;
    case 8:
      result_1442840724 = getMouseButtonCode_1442840722(7);
      break;
    case 9:
      result_1442840724 = getMouseButtonCode_1442840722(0);
      break;
    case 10:
      result_1442840724 = getMouseButtonCode_1442840722(1);
      break;
    case 11:
      result_1442840724 = getMouseButtonCode_1442840722(2);
      break;
    }

  return result_1442840724;

}

function isMousePressed_1426063373(btn_1426063374) {
  var result_1426063375 = false;

    result_1426063375 = isMousePressed_1375732192(getMouseButtonCode_1442840722(btn_1426063374));

  return result_1426063375;

}

function HEX3DHEX3D_1459617913(x_1459617915, y_1459617916) {
  var result_1459617917 = false;

  BeforeRet: {
    if (!((x_1459617915["Field0"] == y_1459617916["Field0"]))) {
    result_1459617917 = false;
    break BeforeRet;
    }
    
    if (!((x_1459617915["Field1"] == y_1459617916["Field1"]))) {
    result_1459617917 = false;
    break BeforeRet;
    }
    
    result_1459617917 = true;
    break BeforeRet;
  };

  return result_1459617917;

}

function getRealPosition_1325400199(x_1325400200, y_1325400201) {
  var result_1325400202 = {Field0: 0, Field1: 0};

    var colontmp__536871378 = HEX2A_1325400110({Field0: x_1325400200, Field1: y_1325400201}, reverse_matrix_1325400069[0]);
    var x_res_1325400203 = colontmp__536871378["Field0"];
    var y_res_1325400204 = colontmp__536871378["Field1"];
    var colontmp__536871376 = ((round_1325400205(x_res_1325400203)) | 0);
    var colontmp__536871377 = ((round_1325400205(y_res_1325400204)) | 0);
    result_1325400202 = nimCopy(result_1325400202, {Field0: colontmp__536871376, Field1: colontmp__536871377}, NTI1325400211);

  return result_1325400202;

}

function getCursorPos_1375732187() {
  var result_1375732188 = {Field0: 0, Field1: 0};

  BeforeRet: {
    var colontmp__536871379 = mouseX_1375731722[0];
    var colontmp__536871380 = mouseY_1375731723[0];
    result_1375732188 = nimCopy(result_1375732188, {Field0: colontmp__536871379, Field1: colontmp__536871380}, NTI1375732030);
    break BeforeRet;
  };

  return result_1375732188;

}

function getMousePosition_1426063364() {
  var result_1426063365 = {Field0: 0, Field1: 0};

    result_1426063365 = nimCopy(result_1426063365, getRealPosition_1325400199(getCursorPos_1375732187()["Field0"], getCursorPos_1375732187()["Field1"]), NTI1426063364);

  return result_1426063365;

}

function mouseX_1426063366() {
  var result_1426063367 = 0;

    result_1426063367 = getMousePosition_1426063364()["Field0"];

  return result_1426063367;

}

function mouseY_1426063368() {
  var result_1426063369 = 0;

    result_1426063369 = getMousePosition_1426063364()["Field1"];

  return result_1426063369;

}

function sgn_1459617926(x_1459617928) {
  var result_1459617929 = 0;

    result_1459617929 = (((0 < x_1459617928) ? 1 : 0) - ((x_1459617928 < 0) ? 1 : 0));

  return result_1459617929;

}

function max_33555646(x_33555647, y_33555648) {
    var Temporary1;

  var result_33555649 = 0.0;

    if (((y_33555648 <= x_33555647) || !((y_33555648 == y_33555648)))) {
    Temporary1 = x_33555647;
    }
    else {
    Temporary1 = y_33555648;
    }
    
    result_33555649 = Temporary1;

  return result_33555649;

}

function update_1459617854(menu_1459617855) {
    
function HEX3Aanonymous_1459617908() {
        stroke_1358955013(0, 0.0, 1.0, min_33555613(menu_1459617855.display, 1.0));

      
    }

    HEX2DHEX3D_1325400209(menu_1459617855, "display", (1.0 / params_1174405140[0].frameRate));
    if ((0.0 < menu_1459617855.display)) {
    stroke_1358955008(0, 0, 0, 0);
    fill_1358954615(2, 0.8, 0.5, min_33555613(menu_1459617855.display, 0.7));
    rectFill_1459617861(0.0, (params_1174405140[0].windowHeight - 36.0), (params_1174405140[0].windowWidth * menu_1459617855.values[menu_1459617855.current]), 36.0);
    draw_1476395103({text: displayName_1459617812(menu_1459617855.items[menu_1459617855.current]), x: 10.0, y: (params_1174405140[0].windowHeight - 9.0), size: 1.0, stroke: HEX3Aanonymous_1459617908});
    stroke_1459617910(1.0);
    }
    
    if (isMousePressed_1426063373(9)) {
    if (HEX3DHEX3D_1459617913(menu_1459617855.click, {Field0: -1, Field1: -1})) {
    var colontmp__536871353 = mouseX_1426063366();
    var colontmp__536871354 = mouseY_1426063368();
    menu_1459617855.click = nimCopy(menu_1459617855.click, {Field0: colontmp__536871353, Field1: colontmp__536871354}, NTI1459617801);
    }
    
    var vec_1459617925 = {Field0: (mouseX_1426063366() - menu_1459617855.click.Field0), Field1: (mouseY_1426063368() - menu_1459617855.click.Field1)};
    if ((((Math.abs(vec_1459617925.Field0) < Math.abs(vec_1459617925.Field1)) && (40 < Math.abs(vec_1459617925.Field1))) && (refVal_1459617853[0] == -1.0))) {
    menu_1459617855.current += sgn_1459617926(vec_1459617925.Field1);
    if ((menu_1459617855.current < 0)) {
    menu_1459617855.current = ((menu_1459617855.items).length - 1);
    }
    
    if (((menu_1459617855.items).length <= menu_1459617855.current)) {
    menu_1459617855.current = 0;
    }
    
    var colontmp__536871355 = mouseX_1426063366();
    var colontmp__536871356 = mouseY_1426063368();
    menu_1459617855.click = nimCopy(menu_1459617855.click, {Field0: colontmp__536871355, Field1: colontmp__536871356}, NTI1459617801);
    }
    
    if ((((Math.abs(vec_1459617925.Field1) < Math.abs(vec_1459617925.Field0)) && (20 < Math.abs(vec_1459617925.Field0))) || !((refVal_1459617853[0] == -1.0)))) {
    if ((refVal_1459617853[0] == -1.0)) {
    refVal_1459617853[0] = menu_1459617855.values[menu_1459617855.current];
    }
    
    menu_1459617855.values[menu_1459617855.current] = max_33555646(0.0, min_33555613(1.0, (refVal_1459617853[0] + HEX2F_33556035(vec_1459617925.Field0, ((params_1174405140[0].windowWidth) | 0)))));
    menu_1459617855.updaters[menu_1459617855.current](menu_1459617855.values[menu_1459617855.current]);
    }
    
    menu_1459617855.display = 3.0;
    }
    else {
      var colontmp__536871357 = -1;
      var colontmp__536871358 = -1;
      menu_1459617855.click = nimCopy(menu_1459617855.click, {Field0: colontmp__536871357, Field1: colontmp__536871358}, NTI1459617801);
      refVal_1459617853[0] = -1.0;
    }
    

  
}

function quit_33557542(errorcode_33557543) {
    exit(((errorcode_33557543) | 0));

  
}

function afterInit_1107296569() {
    state_1107296297[0].pages[next_1107296349()] = nimCopy(state_1107296297[0].pages[next_1107296349()], state_1107296297[0].pages[current_1107296347()], NTI1107296277);

  
}

function start_536870991(init_536870994, update_536870995) {
    
function draw_536871168() {
                  var Temporary5;
                  var Temporary6;
                  var Temporary7;
                  var Temporary8;
                  var Temporary9;
                  var Temporary10;
                  var Temporary11;
                  var Temporary12;

        background_536870997(0);
        roll_1107296579();
        Label1: {
          var particle_536871172 = 0;
          Label2: {
            var index_536871278 = 0;
            var colontmp__536871279 = 0;
            colontmp__536871279 = ((((params_1174405140[0].particleCount * 500.0)) | 0) - 1);
            var res_536871280 = 0;
            Label3: {
                Label4: while (true) {
                if (!(res_536871280 <= colontmp__536871279)) break Label4;
                  index_536871278 = res_536871280;
                  particle_536871172 = index_536871278;
                  update_536870995(particle_536871172);
                  stroke_1358954997((((Temporary5 = HEX24_1107296368(particle_536871172, 4), Temporary5)[0][Temporary5[1]]) | 0), (Temporary6 = HEX24_1107296368(particle_536871172, 5), Temporary6)[0][Temporary6[1]], (Temporary7 = HEX24_1107296368(particle_536871172, 6), Temporary7)[0][Temporary7[1]]);
                  fill_1358954599((((Temporary8 = HEX24_1107296368(particle_536871172, 4), Temporary8)[0][Temporary8[1]]) | 0), (Temporary9 = HEX24_1107296368(particle_536871172, 5), Temporary9)[0][Temporary9[1]], (Temporary10 = HEX24_1107296368(particle_536871172, 6), Temporary10)[0][Temporary10[1]]);
                  circleFill_536871173(((Temporary11 = HEX24_1107296368(particle_536871172, 0), Temporary11)[0][Temporary11[1]] * params_1174405140[0].windowWidth), ((Temporary12 = HEX24_1107296368(particle_536871172, 1), Temporary12)[0][Temporary12[1]] * params_1174405140[0].windowWidth), ((params_1174405140[0].size * params_1174405140[0].windowWidth) * params_1174405140[0].sizeFactor));
                  res_536871280 += 1;
                }
            };
          };
        };
        update_1459617854(menu_536871167);
        if (isMousePressed_1426063373(10)) {
        quit_33557542(0);
        }
        

      
    }
    
function setup_536870996() {
        init_536870994();
        afterInit_1107296569();
        background_536870997(0);

      
    }

    setFrameRate_1308622860(((params_1174405140[0].frameRate) | 0));
    setColorMode_1358954571(1);
    var resultHEX60gensym0_536871000 = [];
    Label1: {
      var xHEX60gensym0_536871001 = [];
      Label2: {
          Label3: while (true) {
          if (!true) break Label3;
            xHEX60gensym0_536871001 = [112,97,114,116,105,99,108,101,67,111,117,110,116];
            var Temporary4 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary4);;
            xHEX60gensym0_536871001 = [119,111,114,108,100,83,112,101,101,100];
            var Temporary5 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary5);;
            xHEX60gensym0_536871001 = [115,105,122,101];
            var Temporary6 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary6);;
            xHEX60gensym0_536871001 = [109,97,115,115];
            var Temporary7 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary7);;
            xHEX60gensym0_536871001 = [102,108,105,99,107,101,114];
            var Temporary8 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary8);;
            xHEX60gensym0_536871001 = [102,108,105,99,107,101,114,82,97,116,105,111];
            var Temporary9 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary9);;
            xHEX60gensym0_536871001 = [103,108,105,116,116,101,114];
            var Temporary10 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary10);;
            xHEX60gensym0_536871001 = [103,108,105,116,116,101,114,82,97,116,105,111];
            var Temporary11 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary11);;
            xHEX60gensym0_536871001 = [119,101,105,114,100,66,111,117,110,99,101];
            var Temporary12 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary12);;
            xHEX60gensym0_536871001 = [97,116,116,114,97,99,116,105,111,110];
            var Temporary13 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary13);;
            xHEX60gensym0_536871001 = [97,116,116,114,97,99,116,105,111,110,82,97,100,105,117,115];
            var Temporary14 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary14);;
            xHEX60gensym0_536871001 = [103,114,97,118,105,116,121];
            var Temporary15 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary15);;
            break Label2;
            xHEX60gensym0_536871001 = [119,105,110,100,111,119,72,101,105,103,104,116];
            var Temporary16 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary16);;
            xHEX60gensym0_536871001 = [102,114,97,109,101,82,97,116,101];
            var Temporary17 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary17);;
            xHEX60gensym0_536871001 = [115,105,122,101,70,97,99,116,111,114];
            var Temporary18 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary18);;
            xHEX60gensym0_536871001 = [119,105,100,116,104];
            var Temporary19 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary19);;
            xHEX60gensym0_536871001 = [104,101,105,103,104,116];
            var Temporary20 = nimCopy(null, xHEX60gensym0_536871001, NTI33554449);
            resultHEX60gensym0_536871000.push(Temporary20);;
            break Label2;
          }
      };
    };
    var resultHEX60gensym1_536871006 = [];
    Label21: {
      var xHEX60gensym1_536871007 = 0.0;
      Label22: {
          Label23: while (true) {
          if (!true) break Label23;
            xHEX60gensym1_536871007 = params_1174405140[0].particleCount;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].worldSpeed;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].size;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].mass;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].flicker;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].flickerRatio;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].glitter;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].glitterRatio;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].weirdBounce;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].attraction;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].attractionRadius;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].gravity;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            break Label22;
            xHEX60gensym1_536871007 = params_1174405140[0].windowHeight;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].frameRate;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].sizeFactor;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].width;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            xHEX60gensym1_536871007 = params_1174405140[0].height;
            resultHEX60gensym1_536871006.push(xHEX60gensym1_536871007);;
            break Label22;
          }
      };
    };
    Label24: {
      var iHEX60gensym15_536871141 = 0;
      var resultHEX60gensym15_536871157 = newSeq_536871149(12);
      Label25: {
        var itHEX60gensym15_536871162 = null;
        var i_536871270 = 0;
        Label26: {
            Label27: while (true) {
            if (!true) break Label27;
              itHEX60gensym15_536871162 = updaters_1174405182[0][i_536871270];
              resultHEX60gensym15_536871157[iHEX60gensym15_536871141] = itHEX60gensym15_536871162;
              iHEX60gensym15_536871141 += 1;
              if ((11 <= i_536871270)) {
              break Label26;
              }
              
              i_536871270 += 1;
            }
        };
      };
    };
    var menu_536871167 = {items: nimCopy(null, resultHEX60gensym0_536871000, NTI536870970), values: nimCopy(null, resultHEX60gensym1_536871006, NTI536870976), updaters: nimCopy(null, resultHEX60gensym15_536871157, NTI536871058), click: nimCopy(null, {Field0: -1, Field1: -1}, NTI1459617801), current: 0, display: 0.0};
    run_1308622872(((params_1174405140[0].windowWidth) | 0), ((params_1174405140[0].windowHeight) | 0), draw_536871168, setup_536870996, [103,108,105,116,116,97,104]);

  
}

function rotl_671088671(x_671088672, k_671088673) {
  var result_671088674 = 0;

    result_671088674 = ((x_671088672 << k_671088673) | (x_671088672 >>> ((64 - k_671088673) >>> 0)));

  return result_671088674;

}

function next_671088683(r_671088684) {
  var result_671088685 = 0;

    var s0_671088686 = r_671088684.a0;
    var s1_671088687 = r_671088684.a1;
    result_671088685 = ((s0_671088686 + s1_671088687) >>> 0);
    s1_671088687 = (s1_671088687 ^ s0_671088686);
    r_671088684.a0 = ((rotl_671088671(s0_671088686, 55) ^ s1_671088687) ^ (s1_671088687 << 14));
    r_671088684.a1 = rotl_671088671(s1_671088687, 36);

  return result_671088685;

}

function rand_671088766(r_671088767, max_671088772) {
  var result_671088773 = 0.0;

    var x_671088774 = next_671088683(r_671088767);
    result_671088773 = ((x_671088774 / 4294967295.0) * max_671088772);

  return result_671088773;

}

function rand_671088788(max_671088789) {
  var result_671088790 = 0.0;

    result_671088790 = rand_671088766(state_671088653[0], max_671088789);

  return result_671088790;

}

function rand_536870967(r_536870969, x_536870970) {
  var result_536870971 = 0.0;

    result_536870971 = (rand_671088766(r_536870969, (x_536870970.b - x_536870970.a)) + x_536870970.a);

  return result_536870971;

}

function rand_536870959(x_536870961) {
  var result_536870962 = 0.0;

    result_536870962 = rand_536870967(state_671088653[0], x_536870961);

  return result_536870962;

}

function HEX2EHEX2E_536870927(a_536870930, b_536870931) {
  var result_536870934 = ({a: 0.0, b: 0.0});

    result_536870934 = nimCopy(result_536870934, {a: a_536870930, b: b_536870931}, NTI536870929);

  return result_536870934;

}

function rand_671088744(r_671088746, max_671088747) {
  var result_671088748 = 0;

  BeforeRet: {
    if ((max_671088747 == 0)) {
    break BeforeRet;
    }
    else {
      var max_671088749 = max_671088747;
      if ((max_671088749 == -1)) {
      result_671088748 = next_671088683(r_671088746);
      break BeforeRet;
      }
      
      Label1: {
          Label2: while (true) {
          if (!true) break Label2;
            var x_671088762 = next_671088683(r_671088746);
            if ((x_671088762 <= ((4294967295 - (4294967295 % max_671088749)) ))) {
            result_671088748 = (x_671088762 % ((max_671088749 + 1) ));
            break BeforeRet;
            }
            
          }
      };
    }
    
  };

  return result_671088748;

}

function rand_671088740(r_671088741, max_671088742) {
  var result_671088743 = 0;

    result_671088743 = rand_671088744(r_671088741, max_671088742);

  return result_671088743;

}

function rand_671088763(max_671088764) {
  var result_671088765 = 0;

    result_671088765 = rand_671088740(state_671088653[0], max_671088764);

  return result_671088765;

}

function init_536870921() {
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;
            var Temporary9;
            var Temporary10;
            var Temporary11;

    Label1: {
      var p_536870926 = 0;
      var res_536871382 = 0;
      Label2: {
          Label3: while (true) {
          if (!(res_536871382 <= 99999)) break Label3;
            p_536870926 = res_536871382;
            (Temporary4 = HEX24_1107296368(p_536870926, 0), Temporary4)[0][Temporary4[1]] = rand_671088788(params_1174405140[0].width);
            (Temporary5 = HEX24_1107296368(p_536870926, 1), Temporary5)[0][Temporary5[1]] = rand_671088788(params_1174405140[0].height);
            if ((params_1174405140[0].gravity == 0.0)) {
            (Temporary6 = HEX24_1107296368(p_536870926, 2), Temporary6)[0][Temporary6[1]] = rand_536870959(HEX2EHEX2E_536870927(-1.0, 1.0));
            (Temporary7 = HEX24_1107296368(p_536870926, 3), Temporary7)[0][Temporary7[1]] = rand_536870959(HEX2EHEX2E_536870927(-1.0, 1.0));
            }
            
            if ((rand_671088763(1) == 1)) {
            Temporary9 = 151.0;
            }
            else {
            Temporary9 = 0.0;
            }
            
            (Temporary8 = HEX24_1107296368(p_536870926, 4), Temporary8)[0][Temporary8[1]] = Temporary9;
            (Temporary10 = HEX24_1107296368(p_536870926, 5), Temporary10)[0][Temporary10[1]] = 100.0;
            (Temporary11 = HEX24_1107296368(p_536870926, 6), Temporary11)[0][Temporary11[1]] = 1.0;
            res_536871382 += 1;
          }
      };
    };

  
}

function HEX24HEX3E_1107296381(particle_1107296382, field_1107296383) {
    var Temporary1;

  var result_1107296384 = null;
  var result_1107296384_Idx = 0;

    result_1107296384 = (Temporary1 = state_1107296297[0].pages[next_1107296349()], Temporary1); result_1107296384_Idx = field_1107296331(particle_1107296382, field_1107296383);

  return [result_1107296384, result_1107296384_Idx];

}

function sgn_1258291215(x_1258291217) {
  var result_1258291218 = 0;

    result_1258291218 = (((0.0 < x_1258291217) ? 1 : 0) - ((x_1258291217 < 0.0) ? 1 : 0));

  return result_1258291218;

}

function weirdBounce_1258291211(distance_1258291212, p_1258291213, q_1258291214) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
    var Temporary4;
    var Temporary5;
    var Temporary6;
    var Temporary7;
    var Temporary8;

    if ((distance_1258291212 < params_1174405140[0].size)) {
    (Temporary1 = HEX24HEX3E_1107296381(p_1258291213, 2), Temporary1)[0][Temporary1[1]] = ((Temporary2 = HEX24_1107296368(q_1258291214, 2), Temporary2)[0][Temporary2[1]] * sgn_1258291215(((Temporary3 = HEX24_1107296368(p_1258291213, 2), Temporary3)[0][Temporary3[1]] * (Temporary4 = HEX24_1107296368(q_1258291214, 2), Temporary4)[0][Temporary4[1]])));
    (Temporary5 = HEX24HEX3E_1107296381(p_1258291213, 3), Temporary5)[0][Temporary5[1]] = ((Temporary6 = HEX24_1107296368(q_1258291214, 3), Temporary6)[0][Temporary6[1]] * sgn_1258291215(((Temporary7 = HEX24_1107296368(p_1258291213, 3), Temporary7)[0][Temporary7[1]] * (Temporary8 = HEX24_1107296368(q_1258291214, 3), Temporary8)[0][Temporary8[1]])));
    }
    

  
}

function HEX2AHEX3D_889194664(x_889194666, x_889194666_Idx, y_889194667) {
    x_889194666[x_889194666_Idx] = (x_889194666[x_889194666_Idx] * y_889194667);

  
}

function HEX5E_1241513991(x_1241513993, y_1241513994) {
  var result_1241513995 = [0.0];

    switch (y_1241513994) {
    case 0:
      result_1241513995[0] = 1.0;
      break;
    case 1:
      result_1241513995[0] = x_1241513993;
      break;
    case 2:
      result_1241513995[0] = (x_1241513993 * x_1241513993);
      break;
    case 3:
      result_1241513995[0] = ((x_1241513993 * x_1241513993) * x_1241513993);
      break;
    default: 
      var colontmp__536871396 = {Field0: x_1241513993, Field1: nimCopy(null, y_1241513994, NTI33555149)};
      var x_1241513996 = [colontmp__536871396["Field0"]];
      var y_1241513997 = colontmp__536871396["Field1"];
      result_1241513995[0] = 1.0;
      Label1: {
          Label2: while (true) {
          if (!true) break Label2;
            if (!(((y_1241513997 & 1) == 0))) {
            HEX2AHEX3D_889194664(result_1241513995, 0, x_1241513996[0]);
            }
            
            y_1241513997 = (y_1241513997 >> 1);
            if ((y_1241513997 == 0)) {
            break Label1;
            }
            
            HEX2AHEX3D_889194664(x_1241513996, 0, x_1241513996[0]);
          }
      };
      break;
    }

  return result_1241513995[0];

}

function distance_1241513987(p1_1241513988, p2_1241513989) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
    var Temporary4;

  var result_1241513990 = 0.0;

  BeforeRet: {
    result_1241513990 = Math.sqrt((HEX5E_1241513991(((Temporary1 = HEX24_1107296368(p1_1241513988, 0), Temporary1)[0][Temporary1[1]] - (Temporary2 = HEX24_1107296368(p2_1241513989, 0), Temporary2)[0][Temporary2[1]]), 2) + HEX5E_1241513991(((Temporary3 = HEX24_1107296368(p1_1241513988, 1), Temporary3)[0][Temporary3[1]] - (Temporary4 = HEX24_1107296368(p2_1241513989, 1), Temporary4)[0][Temporary4[1]]), 2)));
    break BeforeRet;
  };

  return result_1241513990;

}

function attraction_1258291228(distance_1258291229, p_1258291230, q_1258291231) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
    var Temporary4;
    var Temporary5;
    var Temporary6;

    if ((distance_1258291229 < params_1174405140[0].attractionRadius)) {
    HEX2BHEX3D_889194668((Temporary1 = HEX24HEX3E_1107296381(p_1258291230, 2), Temporary1)[0], Temporary1[1], (((params_1174405140[0].attraction * params_1174405140[0].mass) * ((Temporary2 = HEX24_1107296368(q_1258291231, 0), Temporary2)[0][Temporary2[1]] - (Temporary3 = HEX24_1107296368(p_1258291230, 0), Temporary3)[0][Temporary3[1]])) / (HEX5E_1241513991(distance_1258291229, 2) * params_1174405140[0].frameRate)));
    HEX2BHEX3D_889194668((Temporary4 = HEX24HEX3E_1107296381(p_1258291230, 3), Temporary4)[0], Temporary4[1], (((params_1174405140[0].attraction * params_1174405140[0].mass) * ((Temporary5 = HEX24_1107296368(q_1258291231, 1), Temporary5)[0][Temporary5[1]] - (Temporary6 = HEX24_1107296368(p_1258291230, 1), Temporary6)[0][Temporary6[1]])) / (HEX5E_1241513991(distance_1258291229, 2) * params_1174405140[0].frameRate)));
    }
    

  
}

function gravity_1258291248(p_1258291249) {
    var Temporary1;

    HEX2BHEX3D_889194668((Temporary1 = HEX24HEX3E_1107296381(p_1258291249, 3), Temporary1)[0], Temporary1[1], (params_1174405140[0].gravity / params_1174405140[0].frameRate));

  
}

function add_1107296385(particle_1107296386, field_1107296387, value_1107296388) {
    var Temporary1;

    HEX2BHEX3D_889194668((Temporary1 = state_1107296297[0].pages[next_1107296349()], Temporary1), field_1107296331(particle_1107296386, field_1107296387), value_1107296388);

  
}

function velocityFactor_1258291203() {
  var result_1258291204 = 0.0;

    result_1258291204 = ((params_1174405140[0].worldSpeed * 0.2) / params_1174405140[0].frameRate);

  return result_1258291204;

}

function position_1258291205(p_1258291206) {
    var Temporary1;
    var Temporary2;

    add_1107296385(p_1258291206, 0, ((Temporary1 = HEX24HEX3E_1107296381(p_1258291206, 2), Temporary1)[0][Temporary1[1]] * velocityFactor_1258291203()));
    add_1107296385(p_1258291206, 1, ((Temporary2 = HEX24HEX3E_1107296381(p_1258291206, 3), Temporary2)[0][Temporary2[1]] * velocityFactor_1258291203()));

  
}

function mult_1107296393(particle_1107296394, field_1107296395, value_1107296396) {
    var Temporary1;

    HEX2AHEX3D_889194664((Temporary1 = state_1107296297[0].pages[next_1107296349()], Temporary1), field_1107296331(particle_1107296394, field_1107296395), value_1107296396);

  
}

function bounceWalls_1258291207(p_1258291208) {
    var Temporary1;
    var Temporary2;

    var x_1258291209 = (Temporary1 = HEX24HEX3E_1107296381(p_1258291208, 0), Temporary1)[0][Temporary1[1]];
    var y_1258291210 = (Temporary2 = HEX24HEX3E_1107296381(p_1258291208, 1), Temporary2)[0][Temporary2[1]];
    if ((params_1174405140[0].width < x_1258291209)) {
    mult_1107296393(p_1258291208, 2, -1.0);
    }
    
    if ((x_1258291209 < 0.0)) {
    mult_1107296393(p_1258291208, 2, -1.0);
    }
    
    if ((params_1174405140[0].height < y_1258291210)) {
    mult_1107296393(p_1258291208, 3, -1.0);
    }
    else {
    if ((y_1258291210 < 0.0)) {
    mult_1107296393(p_1258291208, 3, -1.0);
    }
    }

  
}

function flicker_1275068419(p_1275068420) {
    var Temporary1;
      var Temporary2;

    if ((rand_671088788(1.0) < params_1174405140[0].flickerRatio)) {
    (Temporary1 = HEX24HEX3E_1107296381(p_1275068420, 6), Temporary1)[0][Temporary1[1]] = rand_671088788((1.0 - params_1174405140[0].flicker));
    }
    else {
      (Temporary2 = HEX24HEX3E_1107296381(p_1275068420, 6), Temporary2)[0][Temporary2[1]] = 1.0;
    }
    

  
}

function glitter_1275068421(p_1275068422) {
    var Temporary1;
      var Temporary2;

    if ((rand_671088788(1.0) < params_1174405140[0].glitterRatio)) {
    (Temporary1 = HEX24HEX3E_1107296381(p_1275068422, 5), Temporary1)[0][Temporary1[1]] = rand_671088788((1.0 - params_1174405140[0].glitter));
    }
    else {
      (Temporary2 = HEX24HEX3E_1107296381(p_1275068422, 5), Temporary2)[0][Temporary2[1]] = 1.0;
    }
    

  
}

function update_536870988(p_536870989) {
    Label1: {
      var q_536870990 = 0;
      Label2: {
        var index_536871391 = 0;
        var colontmp__536871392 = 0;
        colontmp__536871392 = ((((params_1174405140[0].particleCount * 500.0)) | 0) - 1);
        var res_536871393 = 0;
        Label3: {
            Label4: while (true) {
            if (!(res_536871393 <= colontmp__536871392)) break Label4;
              index_536871391 = res_536871393;
              if (!((index_536871391 == p_536870989))) {
              q_536870990 = index_536871391;
              if ((0.0 < params_1174405140[0].weirdBounce)) {
              weirdBounce_1258291211(distance_1241513987(p_536870989, q_536870990), p_536870989, q_536870990);
              }
              
              if ((0.0 < params_1174405140[0].attraction)) {
              attraction_1258291228(distance_1241513987(p_536870989, q_536870990), p_536870989, q_536870990);
              }
              
              }
              
              res_536871393 += 1;
            }
        };
      };
    };
    if ((0.0 < params_1174405140[0].gravity)) {
    gravity_1258291248(p_536870989);
    }
    
    position_1258291205(p_536870989);
    bounceWalls_1258291207(p_536870989);
    if ((0.0 < params_1174405140[0].flicker)) {
    flicker_1275068419(p_536870989);
    }
    
    if ((0.0 < params_1174405140[0].glitter)) {
    glitter_1275068421(p_536870989);
    }
    

  
}
start_536870991(init_536870921, update_536870988);
